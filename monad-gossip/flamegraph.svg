<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="518" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="501.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="501.00"> </text><svg id="frames" x="10" width="1180" total_samples="11019"><g><title>dyld`start (4 samples, 0.04%)</title><rect x="0.0000%" y="453" width="0.0363%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="463.50"></text></g><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (4 samples, 0.04%)</title><rect x="0.0000%" y="437" width="0.0363%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="4"/><text x="0.2500%" y="447.50"></text></g><g><title>libsystem_kernel.dylib`__exit (4 samples, 0.04%)</title><rect x="0.0000%" y="421" width="0.0363%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="4"/><text x="0.2500%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`__exit (4 samples, 0.04%)</title><rect x="0.0363%" y="453" width="0.0363%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="4"/><text x="0.2863%" y="463.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.03%)</title><rect x="0.0726%" y="309" width="0.0272%" height="15" fill="rgb(208,68,35)" fg:x="8" fg:w="3"/><text x="0.3226%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.02%)</title><rect x="0.0998%" y="309" width="0.0182%" height="15" fill="rgb(232,128,0)" fg:x="11" fg:w="2"/><text x="0.3498%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.05%)</title><rect x="0.1180%" y="309" width="0.0454%" height="15" fill="rgb(207,160,47)" fg:x="13" fg:w="5"/><text x="0.3680%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (25 samples, 0.23%)</title><rect x="0.1724%" y="309" width="0.2269%" height="15" fill="rgb(228,23,34)" fg:x="19" fg:w="25"/><text x="0.4224%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.02%)</title><rect x="0.3993%" y="277" width="0.0182%" height="15" fill="rgb(218,30,26)" fg:x="44" fg:w="2"/><text x="0.6493%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`madvise (23 samples, 0.21%)</title><rect x="0.4356%" y="213" width="0.2087%" height="15" fill="rgb(220,122,19)" fg:x="48" fg:w="23"/><text x="0.6856%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (27 samples, 0.25%)</title><rect x="0.4356%" y="229" width="0.2450%" height="15" fill="rgb(250,228,42)" fg:x="48" fg:w="27"/><text x="0.6856%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`medium_madvise_free_range_no_lock (3 samples, 0.03%)</title><rect x="0.6534%" y="213" width="0.0272%" height="15" fill="rgb(240,193,28)" fg:x="72" fg:w="3"/><text x="0.9034%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.03%)</title><rect x="0.6534%" y="197" width="0.0272%" height="15" fill="rgb(216,20,37)" fg:x="72" fg:w="3"/><text x="0.9034%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (8 samples, 0.07%)</title><rect x="0.6806%" y="229" width="0.0726%" height="15" fill="rgb(206,188,39)" fg:x="75" fg:w="8"/><text x="0.9306%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (4 samples, 0.04%)</title><rect x="0.7532%" y="229" width="0.0363%" height="15" fill="rgb(217,207,13)" fg:x="83" fg:w="4"/><text x="1.0032%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (4 samples, 0.04%)</title><rect x="0.7532%" y="213" width="0.0363%" height="15" fill="rgb(231,73,38)" fg:x="83" fg:w="4"/><text x="1.0032%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (4 samples, 0.04%)</title><rect x="0.8077%" y="213" width="0.0363%" height="15" fill="rgb(225,20,46)" fg:x="89" fg:w="4"/><text x="1.0577%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (13 samples, 0.12%)</title><rect x="0.8440%" y="213" width="0.1180%" height="15" fill="rgb(210,31,41)" fg:x="93" fg:w="13"/><text x="1.0940%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (5 samples, 0.05%)</title><rect x="0.9166%" y="197" width="0.0454%" height="15" fill="rgb(221,200,47)" fg:x="101" fg:w="5"/><text x="1.1666%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (5 samples, 0.05%)</title><rect x="0.9166%" y="181" width="0.0454%" height="15" fill="rgb(226,26,5)" fg:x="101" fg:w="5"/><text x="1.1666%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (15 samples, 0.14%)</title><rect x="1.1798%" y="181" width="0.1361%" height="15" fill="rgb(249,33,26)" fg:x="130" fg:w="15"/><text x="1.4298%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (15 samples, 0.14%)</title><rect x="1.1798%" y="165" width="0.1361%" height="15" fill="rgb(235,183,28)" fg:x="130" fg:w="15"/><text x="1.4298%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (3 samples, 0.03%)</title><rect x="1.3250%" y="181" width="0.0272%" height="15" fill="rgb(221,5,38)" fg:x="146" fg:w="3"/><text x="1.5750%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (10 samples, 0.09%)</title><rect x="1.3522%" y="181" width="0.0908%" height="15" fill="rgb(247,18,42)" fg:x="149" fg:w="10"/><text x="1.6022%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (2 samples, 0.02%)</title><rect x="1.4520%" y="181" width="0.0182%" height="15" fill="rgb(241,131,45)" fg:x="160" fg:w="2"/><text x="1.7020%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (164 samples, 1.49%)</title><rect x="0.9711%" y="213" width="1.4883%" height="15" fill="rgb(249,31,29)" fg:x="107" fg:w="164"/><text x="1.2211%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (160 samples, 1.45%)</title><rect x="1.0074%" y="197" width="1.4520%" height="15" fill="rgb(225,111,53)" fg:x="111" fg:w="160"/><text x="1.2574%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (109 samples, 0.99%)</title><rect x="1.4702%" y="181" width="0.9892%" height="15" fill="rgb(238,160,17)" fg:x="162" fg:w="109"/><text x="1.7202%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (108 samples, 0.98%)</title><rect x="1.4793%" y="165" width="0.9801%" height="15" fill="rgb(214,148,48)" fg:x="163" fg:w="108"/><text x="1.7293%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (12 samples, 0.11%)</title><rect x="2.4594%" y="213" width="0.1089%" height="15" fill="rgb(232,36,49)" fg:x="271" fg:w="12"/><text x="2.7094%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (3 samples, 0.03%)</title><rect x="2.5774%" y="213" width="0.0272%" height="15" fill="rgb(209,103,24)" fg:x="284" fg:w="3"/><text x="2.8274%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.02%)</title><rect x="3.4940%" y="181" width="0.0182%" height="15" fill="rgb(229,88,8)" fg:x="385" fg:w="2"/><text x="3.7440%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (80 samples, 0.73%)</title><rect x="3.3215%" y="197" width="0.7260%" height="15" fill="rgb(213,181,19)" fg:x="366" fg:w="80"/><text x="3.5715%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (59 samples, 0.54%)</title><rect x="3.5121%" y="181" width="0.5354%" height="15" fill="rgb(254,191,54)" fg:x="387" fg:w="59"/><text x="3.7621%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (58 samples, 0.53%)</title><rect x="3.5212%" y="165" width="0.5264%" height="15" fill="rgb(241,83,37)" fg:x="388" fg:w="58"/><text x="3.7712%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (5 samples, 0.05%)</title><rect x="4.2563%" y="181" width="0.0454%" height="15" fill="rgb(233,36,39)" fg:x="469" fg:w="5"/><text x="4.5063%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (26 samples, 0.24%)</title><rect x="4.9460%" y="165" width="0.2360%" height="15" fill="rgb(226,3,54)" fg:x="545" fg:w="26"/><text x="5.1960%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (43 samples, 0.39%)</title><rect x="5.1820%" y="165" width="0.3902%" height="15" fill="rgb(245,192,40)" fg:x="571" fg:w="43"/><text x="5.4320%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (71 samples, 0.64%)</title><rect x="5.5722%" y="165" width="0.6443%" height="15" fill="rgb(238,167,29)" fg:x="614" fg:w="71"/><text x="5.8222%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (20 samples, 0.18%)</title><rect x="6.2165%" y="165" width="0.1815%" height="15" fill="rgb(232,182,51)" fg:x="685" fg:w="20"/><text x="6.4665%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (20 samples, 0.18%)</title><rect x="6.3980%" y="165" width="0.1815%" height="15" fill="rgb(231,60,39)" fg:x="705" fg:w="20"/><text x="6.6480%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (283 samples, 2.57%)</title><rect x="4.3017%" y="181" width="2.5683%" height="15" fill="rgb(208,69,12)" fg:x="474" fg:w="283"/><text x="4.5517%" y="191.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (32 samples, 0.29%)</title><rect x="6.5795%" y="165" width="0.2904%" height="15" fill="rgb(235,93,37)" fg:x="725" fg:w="32"/><text x="6.8295%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (31 samples, 0.28%)</title><rect x="6.5886%" y="149" width="0.2813%" height="15" fill="rgb(213,116,39)" fg:x="726" fg:w="31"/><text x="6.8386%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (312 samples, 2.83%)</title><rect x="4.0476%" y="197" width="2.8315%" height="15" fill="rgb(222,207,29)" fg:x="446" fg:w="312"/><text x="4.2976%" y="207.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (6 samples, 0.05%)</title><rect x="6.8790%" y="197" width="0.0545%" height="15" fill="rgb(206,96,30)" fg:x="758" fg:w="6"/><text x="7.1290%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (10 samples, 0.09%)</title><rect x="6.9335%" y="197" width="0.0908%" height="15" fill="rgb(218,138,4)" fg:x="764" fg:w="10"/><text x="7.1835%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (10 samples, 0.09%)</title><rect x="7.0242%" y="197" width="0.0908%" height="15" fill="rgb(250,191,14)" fg:x="774" fg:w="10"/><text x="7.2742%" y="207.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (500 samples, 4.54%)</title><rect x="2.6046%" y="213" width="4.5376%" height="15" fill="rgb(239,60,40)" fg:x="287" fg:w="500"/><text x="2.8546%" y="223.50">monad..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.03%)</title><rect x="7.1150%" y="197" width="0.0272%" height="15" fill="rgb(206,27,48)" fg:x="784" fg:w="3"/><text x="7.3650%" y="207.50"></text></g><g><title>monad_gossip-955ed6b31611c195`__rdl_dealloc (4 samples, 0.04%)</title><rect x="7.1513%" y="213" width="0.0363%" height="15" fill="rgb(225,35,8)" fg:x="788" fg:w="4"/><text x="7.4013%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_detach_region (2 samples, 0.02%)</title><rect x="7.2148%" y="181" width="0.0182%" height="15" fill="rgb(250,213,24)" fg:x="795" fg:w="2"/><text x="7.4648%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.02%)</title><rect x="7.2330%" y="181" width="0.0182%" height="15" fill="rgb(247,123,22)" fg:x="797" fg:w="2"/><text x="7.4830%" y="191.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (9 samples, 0.08%)</title><rect x="7.1876%" y="213" width="0.0817%" height="15" fill="rgb(231,138,38)" fg:x="792" fg:w="9"/><text x="7.4376%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_small (9 samples, 0.08%)</title><rect x="7.1876%" y="197" width="0.0817%" height="15" fill="rgb(231,145,46)" fg:x="792" fg:w="9"/><text x="7.4376%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (2 samples, 0.02%)</title><rect x="7.2511%" y="181" width="0.0182%" height="15" fill="rgb(251,118,11)" fg:x="799" fg:w="2"/><text x="7.5011%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.02%)</title><rect x="7.2511%" y="165" width="0.0182%" height="15" fill="rgb(217,147,25)" fg:x="799" fg:w="2"/><text x="7.5011%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.04%)</title><rect x="7.2693%" y="197" width="0.0363%" height="15" fill="rgb(247,81,37)" fg:x="801" fg:w="4"/><text x="7.5193%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.02%)</title><rect x="7.2874%" y="181" width="0.0182%" height="15" fill="rgb(209,12,38)" fg:x="803" fg:w="2"/><text x="7.5374%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (22 samples, 0.20%)</title><rect x="7.3146%" y="197" width="0.1997%" height="15" fill="rgb(227,1,9)" fg:x="806" fg:w="22"/><text x="7.5646%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_size (2 samples, 0.02%)</title><rect x="7.5506%" y="165" width="0.0182%" height="15" fill="rgb(248,47,43)" fg:x="832" fg:w="2"/><text x="7.8006%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (21 samples, 0.19%)</title><rect x="7.5415%" y="181" width="0.1906%" height="15" fill="rgb(221,10,30)" fg:x="831" fg:w="21"/><text x="7.7915%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (18 samples, 0.16%)</title><rect x="7.5687%" y="165" width="0.1634%" height="15" fill="rgb(210,229,1)" fg:x="834" fg:w="18"/><text x="7.8187%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (18 samples, 0.16%)</title><rect x="7.5687%" y="149" width="0.1634%" height="15" fill="rgb(222,148,37)" fg:x="834" fg:w="18"/><text x="7.8187%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (2 samples, 0.02%)</title><rect x="7.8229%" y="149" width="0.0182%" height="15" fill="rgb(234,67,33)" fg:x="862" fg:w="2"/><text x="8.0729%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_detach_region (4 samples, 0.04%)</title><rect x="7.8229%" y="165" width="0.0363%" height="15" fill="rgb(247,98,35)" fg:x="862" fg:w="4"/><text x="8.0729%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.02%)</title><rect x="7.8410%" y="149" width="0.0182%" height="15" fill="rgb(247,138,52)" fg:x="864" fg:w="2"/><text x="8.0910%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (12 samples, 0.11%)</title><rect x="7.8592%" y="165" width="0.1089%" height="15" fill="rgb(213,79,30)" fg:x="866" fg:w="12"/><text x="8.1092%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (3 samples, 0.03%)</title><rect x="7.9681%" y="165" width="0.0272%" height="15" fill="rgb(246,177,23)" fg:x="878" fg:w="3"/><text x="8.2181%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (49 samples, 0.44%)</title><rect x="7.9953%" y="165" width="0.4447%" height="15" fill="rgb(230,62,27)" fg:x="881" fg:w="49"/><text x="8.2453%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (26 samples, 0.24%)</title><rect x="8.4490%" y="149" width="0.2360%" height="15" fill="rgb(216,154,8)" fg:x="931" fg:w="26"/><text x="8.6990%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (106 samples, 0.96%)</title><rect x="7.7321%" y="181" width="0.9620%" height="15" fill="rgb(244,35,45)" fg:x="852" fg:w="106"/><text x="7.9821%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (27 samples, 0.25%)</title><rect x="8.4490%" y="165" width="0.2450%" height="15" fill="rgb(251,115,12)" fg:x="931" fg:w="27"/><text x="8.6990%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (6 samples, 0.05%)</title><rect x="8.6941%" y="181" width="0.0545%" height="15" fill="rgb(240,54,50)" fg:x="958" fg:w="6"/><text x="8.9441%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (6 samples, 0.05%)</title><rect x="8.6941%" y="165" width="0.0545%" height="15" fill="rgb(233,84,52)" fg:x="958" fg:w="6"/><text x="8.9441%" y="175.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (879 samples, 7.98%)</title><rect x="0.7986%" y="229" width="7.9771%" height="15" fill="rgb(207,117,47)" fg:x="88" fg:w="879"/><text x="1.0486%" y="239.50">monad_gossi..</text></g><g><title>monad_gossip-955ed6b31611c195`bytes::bytes::promotable_even_drop (166 samples, 1.51%)</title><rect x="7.2693%" y="213" width="1.5065%" height="15" fill="rgb(249,43,39)" fg:x="801" fg:w="166"/><text x="7.5193%" y="223.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (138 samples, 1.25%)</title><rect x="7.5234%" y="197" width="1.2524%" height="15" fill="rgb(209,38,44)" fg:x="829" fg:w="138"/><text x="7.7734%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (2 samples, 0.02%)</title><rect x="8.7576%" y="181" width="0.0182%" height="15" fill="rgb(236,212,23)" fg:x="965" fg:w="2"/><text x="9.0076%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (5 samples, 0.05%)</title><rect x="8.7939%" y="197" width="0.0454%" height="15" fill="rgb(242,79,21)" fg:x="969" fg:w="5"/><text x="9.0439%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (5 samples, 0.05%)</title><rect x="8.7939%" y="181" width="0.0454%" height="15" fill="rgb(211,96,35)" fg:x="969" fg:w="5"/><text x="9.0439%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (9 samples, 0.08%)</title><rect x="8.7758%" y="213" width="0.0817%" height="15" fill="rgb(253,215,40)" fg:x="967" fg:w="9"/><text x="9.0258%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.02%)</title><rect x="8.8393%" y="197" width="0.0182%" height="15" fill="rgb(211,81,21)" fg:x="974" fg:w="2"/><text x="9.0893%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_detach_region (2 samples, 0.02%)</title><rect x="8.9754%" y="197" width="0.0182%" height="15" fill="rgb(208,190,38)" fg:x="989" fg:w="2"/><text x="9.2254%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (4 samples, 0.04%)</title><rect x="8.9936%" y="197" width="0.0363%" height="15" fill="rgb(235,213,38)" fg:x="991" fg:w="4"/><text x="9.2436%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (46 samples, 0.42%)</title><rect x="9.0389%" y="197" width="0.4175%" height="15" fill="rgb(237,122,38)" fg:x="996" fg:w="46"/><text x="9.2889%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (2 samples, 0.02%)</title><rect x="9.4564%" y="197" width="0.0182%" height="15" fill="rgb(244,218,35)" fg:x="1042" fg:w="2"/><text x="9.7064%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (79 samples, 0.72%)</title><rect x="8.8665%" y="213" width="0.7169%" height="15" fill="rgb(240,68,47)" fg:x="977" fg:w="79"/><text x="9.1165%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (12 samples, 0.11%)</title><rect x="9.4745%" y="197" width="0.1089%" height="15" fill="rgb(210,16,53)" fg:x="1044" fg:w="12"/><text x="9.7245%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (11 samples, 0.10%)</title><rect x="9.4836%" y="181" width="0.0998%" height="15" fill="rgb(235,124,12)" fg:x="1045" fg:w="11"/><text x="9.7336%" y="191.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1,014 samples, 9.20%)</title><rect x="0.3993%" y="309" width="9.2023%" height="15" fill="rgb(224,169,11)" fg:x="44" fg:w="1014"/><text x="0.6493%" y="319.50">monad_gossip-..</text></g><g><title>monad_gossip-955ed6b31611c195`core::ptr::drop_in_place&lt;monad_gossip::testutil::Node&lt;monad_gossip::seeder::Seeder&lt;monad_gossip::seeder::raptor::Raptor&lt;monad_crypto::NopSignature&gt;&gt;&gt;&gt; (1,014 samples, 9.20%)</title><rect x="0.3993%" y="293" width="9.2023%" height="15" fill="rgb(250,166,2)" fg:x="44" fg:w="1014"/><text x="0.6493%" y="303.50">monad_gossip-..</text></g><g><title>monad_gossip-955ed6b31611c195`core::ptr::drop_in_place&lt;monad_gossip::seeder::Seeder&lt;monad_gossip::seeder::raptor::Raptor&lt;monad_crypto::NopSignature&gt;&gt;&gt; (1,012 samples, 9.18%)</title><rect x="0.4175%" y="277" width="9.1841%" height="15" fill="rgb(242,216,29)" fg:x="46" fg:w="1012"/><text x="0.6675%" y="287.50">monad_gossip-..</text></g><g><title>monad_gossip-955ed6b31611c195`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1,012 samples, 9.18%)</title><rect x="0.4175%" y="261" width="9.1841%" height="15" fill="rgb(230,116,27)" fg:x="46" fg:w="1012"/><text x="0.6675%" y="271.50">monad_gossip-..</text></g><g><title>monad_gossip-955ed6b31611c195`core::ptr::drop_in_place&lt;monad_gossip::seeder::ChunkerStatus&lt;monad_gossip::seeder::raptor::Raptor&lt;monad_crypto::NopSignature&gt;&gt;&gt; (1,012 samples, 9.18%)</title><rect x="0.4175%" y="245" width="9.1841%" height="15" fill="rgb(228,99,48)" fg:x="46" fg:w="1012"/><text x="0.6675%" y="255.50">monad_gossip-..</text></g><g><title>monad_gossip-955ed6b31611c195`core::ptr::drop_in_place&lt;raptorq::decoder::SourceBlockDecoder&gt; (91 samples, 0.83%)</title><rect x="8.7758%" y="229" width="0.8258%" height="15" fill="rgb(253,11,6)" fg:x="967" fg:w="91"/><text x="9.0258%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (2 samples, 0.02%)</title><rect x="9.5834%" y="213" width="0.0182%" height="15" fill="rgb(247,143,39)" fg:x="1056" fg:w="2"/><text x="9.8334%" y="223.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;bytes_utils::segmented::SegmentedBuf&lt;B&gt; as bytes::buf::buf_impl::Buf&gt;::copy_to_bytes (2 samples, 0.02%)</title><rect x="9.6016%" y="309" width="0.0182%" height="15" fill="rgb(236,97,10)" fg:x="1058" fg:w="2"/><text x="9.8516%" y="319.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.03%)</title><rect x="9.6197%" y="309" width="0.0272%" height="15" fill="rgb(233,208,19)" fg:x="1060" fg:w="3"/><text x="9.8697%" y="319.50"></text></g><g><title>monad_gossip-955ed6b31611c195`DYLD-STUB$$free (2 samples, 0.02%)</title><rect x="9.6470%" y="309" width="0.0182%" height="15" fill="rgb(216,164,2)" fg:x="1063" fg:w="2"/><text x="9.8970%" y="319.50"></text></g><g><title>monad_gossip-955ed6b31611c195`DYLD-STUB$$memmove (4 samples, 0.04%)</title><rect x="9.6651%" y="309" width="0.0363%" height="15" fill="rgb(220,129,5)" fg:x="1065" fg:w="4"/><text x="9.9151%" y="319.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_up (17 samples, 0.15%)</title><rect x="9.7014%" y="309" width="0.1543%" height="15" fill="rgb(242,17,10)" fg:x="1069" fg:w="17"/><text x="9.9514%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`small_size (10 samples, 0.09%)</title><rect x="9.9102%" y="277" width="0.0908%" height="15" fill="rgb(242,107,0)" fg:x="1092" fg:w="10"/><text x="10.1602%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (22 samples, 0.20%)</title><rect x="9.8557%" y="293" width="0.1997%" height="15" fill="rgb(251,28,31)" fg:x="1086" fg:w="22"/><text x="10.1057%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (6 samples, 0.05%)</title><rect x="10.0009%" y="277" width="0.0545%" height="15" fill="rgb(233,223,10)" fg:x="1102" fg:w="6"/><text x="10.2509%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (5 samples, 0.05%)</title><rect x="10.0100%" y="261" width="0.0454%" height="15" fill="rgb(215,21,27)" fg:x="1103" fg:w="5"/><text x="10.2600%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`small_free_detach_region (6 samples, 0.05%)</title><rect x="10.1552%" y="277" width="0.0545%" height="15" fill="rgb(232,23,21)" fg:x="1119" fg:w="6"/><text x="10.4052%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (4 samples, 0.04%)</title><rect x="10.1733%" y="261" width="0.0363%" height="15" fill="rgb(244,5,23)" fg:x="1121" fg:w="4"/><text x="10.4233%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (7 samples, 0.06%)</title><rect x="10.2096%" y="277" width="0.0635%" height="15" fill="rgb(226,81,46)" fg:x="1125" fg:w="7"/><text x="10.4596%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (4 samples, 0.04%)</title><rect x="10.2732%" y="277" width="0.0363%" height="15" fill="rgb(247,70,30)" fg:x="1132" fg:w="4"/><text x="10.5232%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (26 samples, 0.24%)</title><rect x="10.3095%" y="277" width="0.2360%" height="15" fill="rgb(212,68,19)" fg:x="1136" fg:w="26"/><text x="10.5595%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`small_free_reattach_region (4 samples, 0.04%)</title><rect x="10.5454%" y="277" width="0.0363%" height="15" fill="rgb(240,187,13)" fg:x="1162" fg:w="4"/><text x="10.7954%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.02%)</title><rect x="10.5636%" y="261" width="0.0182%" height="15" fill="rgb(223,113,26)" fg:x="1164" fg:w="2"/><text x="10.8136%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (8 samples, 0.07%)</title><rect x="10.5817%" y="277" width="0.0726%" height="15" fill="rgb(206,192,2)" fg:x="1166" fg:w="8"/><text x="10.8317%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`madvise (6 samples, 0.05%)</title><rect x="10.5999%" y="261" width="0.0545%" height="15" fill="rgb(241,108,4)" fg:x="1168" fg:w="6"/><text x="10.8499%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_small (154 samples, 1.40%)</title><rect x="10.0554%" y="293" width="1.3976%" height="15" fill="rgb(247,173,49)" fg:x="1108" fg:w="154"/><text x="10.3054%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (88 samples, 0.80%)</title><rect x="10.6543%" y="277" width="0.7986%" height="15" fill="rgb(224,114,35)" fg:x="1174" fg:w="88"/><text x="10.9043%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`madvise (84 samples, 0.76%)</title><rect x="10.6906%" y="261" width="0.7623%" height="15" fill="rgb(245,159,27)" fg:x="1178" fg:w="84"/><text x="10.9406%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (8 samples, 0.07%)</title><rect x="11.4529%" y="293" width="0.0726%" height="15" fill="rgb(245,172,44)" fg:x="1262" fg:w="8"/><text x="11.7029%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (8 samples, 0.07%)</title><rect x="11.4529%" y="277" width="0.0726%" height="15" fill="rgb(236,23,11)" fg:x="1262" fg:w="8"/><text x="11.7029%" y="287.50"></text></g><g><title>monad_gossip-955ed6b31611c195`bytes::bytes::promotable_even_drop (189 samples, 1.72%)</title><rect x="9.8557%" y="309" width="1.7152%" height="15" fill="rgb(205,117,38)" fg:x="1086" fg:w="189"/><text x="10.1057%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.02%)</title><rect x="12.2969%" y="277" width="0.0182%" height="15" fill="rgb(237,72,25)" fg:x="1355" fg:w="2"/><text x="12.5469%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (18 samples, 0.16%)</title><rect x="12.2062%" y="293" width="0.1634%" height="15" fill="rgb(244,70,9)" fg:x="1345" fg:w="18"/><text x="12.4562%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (6 samples, 0.05%)</title><rect x="12.3151%" y="277" width="0.0545%" height="15" fill="rgb(217,125,39)" fg:x="1357" fg:w="6"/><text x="12.5651%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (4 samples, 0.04%)</title><rect x="12.3332%" y="261" width="0.0363%" height="15" fill="rgb(235,36,10)" fg:x="1359" fg:w="4"/><text x="12.5832%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (7 samples, 0.06%)</title><rect x="12.4875%" y="261" width="0.0635%" height="15" fill="rgb(251,123,47)" fg:x="1376" fg:w="7"/><text x="12.7375%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (24 samples, 0.22%)</title><rect x="12.3695%" y="293" width="0.2178%" height="15" fill="rgb(221,13,13)" fg:x="1363" fg:w="24"/><text x="12.6195%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (15 samples, 0.14%)</title><rect x="12.4512%" y="277" width="0.1361%" height="15" fill="rgb(238,131,9)" fg:x="1372" fg:w="15"/><text x="12.7012%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (4 samples, 0.04%)</title><rect x="12.5510%" y="261" width="0.0363%" height="15" fill="rgb(211,50,8)" fg:x="1383" fg:w="4"/><text x="12.8010%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (6 samples, 0.05%)</title><rect x="12.5873%" y="293" width="0.0545%" height="15" fill="rgb(245,182,24)" fg:x="1387" fg:w="6"/><text x="12.8373%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.02%)</title><rect x="12.6418%" y="293" width="0.0182%" height="15" fill="rgb(242,14,37)" fg:x="1393" fg:w="2"/><text x="12.8918%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (3 samples, 0.03%)</title><rect x="12.6600%" y="293" width="0.0272%" height="15" fill="rgb(246,228,12)" fg:x="1395" fg:w="3"/><text x="12.9100%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.04%)</title><rect x="12.7053%" y="293" width="0.0363%" height="15" fill="rgb(213,55,15)" fg:x="1400" fg:w="4"/><text x="12.9553%" y="303.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (72 samples, 0.65%)</title><rect x="12.7416%" y="293" width="0.6534%" height="15" fill="rgb(209,9,3)" fg:x="1404" fg:w="72"/><text x="12.9916%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="13.6582%" y="261" width="0.0182%" height="15" fill="rgb(230,59,30)" fg:x="1505" fg:w="2"/><text x="13.9082%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (18 samples, 0.16%)</title><rect x="13.6310%" y="277" width="0.1634%" height="15" fill="rgb(209,121,21)" fg:x="1502" fg:w="18"/><text x="13.8810%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.12%)</title><rect x="13.6764%" y="261" width="0.1180%" height="15" fill="rgb(220,109,13)" fg:x="1507" fg:w="13"/><text x="13.9264%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (13 samples, 0.12%)</title><rect x="13.6764%" y="245" width="0.1180%" height="15" fill="rgb(232,18,1)" fg:x="1507" fg:w="13"/><text x="13.9264%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.02%)</title><rect x="13.7762%" y="229" width="0.0182%" height="15" fill="rgb(215,41,42)" fg:x="1518" fg:w="2"/><text x="14.0262%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.02%)</title><rect x="13.7944%" y="277" width="0.0182%" height="15" fill="rgb(224,123,36)" fg:x="1520" fg:w="2"/><text x="14.0444%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.02%)</title><rect x="13.9940%" y="261" width="0.0182%" height="15" fill="rgb(240,125,3)" fg:x="1542" fg:w="2"/><text x="14.2440%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (25 samples, 0.23%)</title><rect x="13.8125%" y="277" width="0.2269%" height="15" fill="rgb(205,98,50)" fg:x="1522" fg:w="25"/><text x="14.0625%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.03%)</title><rect x="14.0122%" y="261" width="0.0272%" height="15" fill="rgb(205,185,37)" fg:x="1544" fg:w="3"/><text x="14.2622%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.02%)</title><rect x="14.0212%" y="245" width="0.0182%" height="15" fill="rgb(238,207,15)" fg:x="1545" fg:w="2"/><text x="14.2712%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (12 samples, 0.11%)</title><rect x="14.1211%" y="245" width="0.1089%" height="15" fill="rgb(213,199,42)" fg:x="1556" fg:w="12"/><text x="14.3711%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (24 samples, 0.22%)</title><rect x="14.0394%" y="277" width="0.2178%" height="15" fill="rgb(235,201,11)" fg:x="1547" fg:w="24"/><text x="14.2894%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (19 samples, 0.17%)</title><rect x="14.0848%" y="261" width="0.1724%" height="15" fill="rgb(207,46,11)" fg:x="1552" fg:w="19"/><text x="14.3348%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (3 samples, 0.03%)</title><rect x="14.2300%" y="245" width="0.0272%" height="15" fill="rgb(241,35,35)" fg:x="1568" fg:w="3"/><text x="14.4800%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.02%)</title><rect x="14.2572%" y="277" width="0.0182%" height="15" fill="rgb(243,32,47)" fg:x="1571" fg:w="2"/><text x="14.5072%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.03%)</title><rect x="14.2753%" y="277" width="0.0272%" height="15" fill="rgb(247,202,23)" fg:x="1573" fg:w="3"/><text x="14.5253%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (2 samples, 0.02%)</title><rect x="14.3116%" y="277" width="0.0182%" height="15" fill="rgb(219,102,11)" fg:x="1577" fg:w="2"/><text x="14.5616%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.02%)</title><rect x="14.3389%" y="277" width="0.0182%" height="15" fill="rgb(243,110,44)" fg:x="1580" fg:w="2"/><text x="14.5889%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (13 samples, 0.12%)</title><rect x="14.5294%" y="261" width="0.1180%" height="15" fill="rgb(222,74,54)" fg:x="1601" fg:w="13"/><text x="14.7794%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.05%)</title><rect x="14.6021%" y="245" width="0.0454%" height="15" fill="rgb(216,99,12)" fg:x="1609" fg:w="5"/><text x="14.8521%" y="255.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (33 samples, 0.30%)</title><rect x="14.3570%" y="277" width="0.2995%" height="15" fill="rgb(226,22,26)" fg:x="1582" fg:w="33"/><text x="14.6070%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.09%)</title><rect x="14.7382%" y="261" width="0.0908%" height="15" fill="rgb(217,163,10)" fg:x="1624" fg:w="10"/><text x="14.9882%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.05%)</title><rect x="14.7745%" y="245" width="0.0545%" height="15" fill="rgb(213,25,53)" fg:x="1628" fg:w="6"/><text x="15.0245%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.05%)</title><rect x="14.7836%" y="229" width="0.0454%" height="15" fill="rgb(252,105,26)" fg:x="1629" fg:w="5"/><text x="15.0336%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.02%)</title><rect x="14.8289%" y="261" width="0.0182%" height="15" fill="rgb(220,39,43)" fg:x="1634" fg:w="2"/><text x="15.0789%" y="271.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;monad_transformer::BytesTransformer&lt;PT&gt; as monad_transformer::Transformer&lt;bytes::bytes::Bytes&gt;&gt;::transform (22 samples, 0.20%)</title><rect x="14.6565%" y="277" width="0.1997%" height="15" fill="rgb(229,68,48)" fg:x="1615" fg:w="22"/><text x="14.9065%" y="287.50"></text></g><g><title>monad_gossip-955ed6b31611c195`DYLD-STUB$$malloc (3 samples, 0.03%)</title><rect x="14.9106%" y="261" width="0.0272%" height="15" fill="rgb(252,8,32)" fg:x="1643" fg:w="3"/><text x="15.1606%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (4 samples, 0.04%)</title><rect x="15.1738%" y="197" width="0.0363%" height="15" fill="rgb(223,20,43)" fg:x="1672" fg:w="4"/><text x="15.4238%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (59 samples, 0.54%)</title><rect x="15.0377%" y="229" width="0.5354%" height="15" fill="rgb(229,81,49)" fg:x="1657" fg:w="59"/><text x="15.2877%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (54 samples, 0.49%)</title><rect x="15.0830%" y="213" width="0.4901%" height="15" fill="rgb(236,28,36)" fg:x="1662" fg:w="54"/><text x="15.3330%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (40 samples, 0.36%)</title><rect x="15.2101%" y="197" width="0.3630%" height="15" fill="rgb(249,185,26)" fg:x="1676" fg:w="40"/><text x="15.4601%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (27 samples, 0.25%)</title><rect x="15.3281%" y="181" width="0.2450%" height="15" fill="rgb(249,174,33)" fg:x="1689" fg:w="27"/><text x="15.5781%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (64 samples, 0.58%)</title><rect x="15.0014%" y="245" width="0.5808%" height="15" fill="rgb(233,201,37)" fg:x="1653" fg:w="64"/><text x="15.2514%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="15.5913%" y="245" width="0.0182%" height="15" fill="rgb(221,78,26)" fg:x="1718" fg:w="2"/><text x="15.8413%" y="255.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (82 samples, 0.74%)</title><rect x="14.8834%" y="277" width="0.7442%" height="15" fill="rgb(250,127,30)" fg:x="1640" fg:w="82"/><text x="15.1334%" y="287.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::raw_vec::finish_grow (75 samples, 0.68%)</title><rect x="14.9469%" y="261" width="0.6806%" height="15" fill="rgb(230,49,44)" fg:x="1647" fg:w="75"/><text x="15.1969%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.02%)</title><rect x="15.6094%" y="245" width="0.0182%" height="15" fill="rgb(229,67,23)" fg:x="1720" fg:w="2"/><text x="15.8594%" y="255.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;alloc::vec::Vec&lt;T&gt; as monad_transformer::Pipeline&lt;M&gt;&gt;::process (246 samples, 2.23%)</title><rect x="13.4041%" y="293" width="2.2325%" height="15" fill="rgb(249,83,47)" fg:x="1477" fg:w="246"/><text x="13.6541%" y="303.50">m..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (16 samples, 0.15%)</title><rect x="15.7274%" y="277" width="0.1452%" height="15" fill="rgb(215,43,3)" fg:x="1733" fg:w="16"/><text x="15.9774%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.09%)</title><rect x="15.7818%" y="261" width="0.0908%" height="15" fill="rgb(238,154,13)" fg:x="1739" fg:w="10"/><text x="16.0318%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (9 samples, 0.08%)</title><rect x="15.7909%" y="245" width="0.0817%" height="15" fill="rgb(219,56,2)" fg:x="1740" fg:w="9"/><text x="16.0409%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (2 samples, 0.02%)</title><rect x="15.8544%" y="229" width="0.0182%" height="15" fill="rgb(233,0,4)" fg:x="1747" fg:w="2"/><text x="16.1044%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (225 samples, 2.04%)</title><rect x="15.8907%" y="277" width="2.0419%" height="15" fill="rgb(235,30,7)" fg:x="1751" fg:w="225"/><text x="16.1407%" y="287.50">l..</text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (3 samples, 0.03%)</title><rect x="18.0779%" y="261" width="0.0272%" height="15" fill="rgb(250,79,13)" fg:x="1992" fg:w="3"/><text x="18.3279%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.03%)</title><rect x="18.1051%" y="261" width="0.0272%" height="15" fill="rgb(211,146,34)" fg:x="1995" fg:w="3"/><text x="18.3551%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (7 samples, 0.06%)</title><rect x="18.1323%" y="261" width="0.0635%" height="15" fill="rgb(228,22,38)" fg:x="1998" fg:w="7"/><text x="18.3823%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.02%)</title><rect x="18.3864%" y="245" width="0.0182%" height="15" fill="rgb(235,168,5)" fg:x="2026" fg:w="2"/><text x="18.6364%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (22 samples, 0.20%)</title><rect x="18.4046%" y="245" width="0.1997%" height="15" fill="rgb(221,155,16)" fg:x="2028" fg:w="22"/><text x="18.6546%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.07%)</title><rect x="18.5316%" y="229" width="0.0726%" height="15" fill="rgb(215,215,53)" fg:x="2042" fg:w="8"/><text x="18.7816%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (12 samples, 0.11%)</title><rect x="18.6133%" y="245" width="0.1089%" height="15" fill="rgb(223,4,10)" fg:x="2051" fg:w="12"/><text x="18.8633%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (3 samples, 0.03%)</title><rect x="18.6950%" y="229" width="0.0272%" height="15" fill="rgb(234,103,6)" fg:x="2060" fg:w="3"/><text x="18.9450%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.03%)</title><rect x="18.6950%" y="213" width="0.0272%" height="15" fill="rgb(227,97,0)" fg:x="2060" fg:w="3"/><text x="18.9450%" y="223.50"></text></g><g><title>monad_gossip-955ed6b31611c195`DYLD-STUB$$free (3 samples, 0.03%)</title><rect x="18.7313%" y="245" width="0.0272%" height="15" fill="rgb(234,150,53)" fg:x="2064" fg:w="3"/><text x="18.9813%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (13 samples, 0.12%)</title><rect x="18.7585%" y="229" width="0.1180%" height="15" fill="rgb(228,201,54)" fg:x="2067" fg:w="13"/><text x="19.0085%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.03%)</title><rect x="18.8493%" y="213" width="0.0272%" height="15" fill="rgb(222,22,37)" fg:x="2077" fg:w="3"/><text x="19.0993%" y="223.50"></text></g><g><title>monad_gossip-955ed6b31611c195`bytes::bytes::promotable_even_drop (17 samples, 0.15%)</title><rect x="18.7585%" y="245" width="0.1543%" height="15" fill="rgb(237,53,32)" fg:x="2067" fg:w="17"/><text x="19.0085%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (19 samples, 0.17%)</title><rect x="19.0126%" y="229" width="0.1724%" height="15" fill="rgb(233,25,53)" fg:x="2095" fg:w="19"/><text x="19.2626%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (10 samples, 0.09%)</title><rect x="19.0943%" y="213" width="0.0908%" height="15" fill="rgb(210,40,34)" fg:x="2104" fg:w="10"/><text x="19.3443%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.03%)</title><rect x="19.1850%" y="229" width="0.0272%" height="15" fill="rgb(241,220,44)" fg:x="2114" fg:w="3"/><text x="19.4350%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (15 samples, 0.14%)</title><rect x="19.2123%" y="229" width="0.1361%" height="15" fill="rgb(235,28,35)" fg:x="2117" fg:w="15"/><text x="19.4623%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (11 samples, 0.10%)</title><rect x="19.2486%" y="213" width="0.0998%" height="15" fill="rgb(210,56,17)" fg:x="2121" fg:w="11"/><text x="19.4986%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (11 samples, 0.10%)</title><rect x="19.2486%" y="197" width="0.0998%" height="15" fill="rgb(224,130,29)" fg:x="2121" fg:w="11"/><text x="19.4986%" y="207.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;&amp;mut T as bytes::buf::buf_impl::Buf&gt;::advance (127 samples, 1.15%)</title><rect x="18.2049%" y="261" width="1.1526%" height="15" fill="rgb(235,212,8)" fg:x="2006" fg:w="127"/><text x="18.4549%" y="271.50"></text></g><g><title>monad_gossip-955ed6b31611c195`bytes::bytes::shared_drop (49 samples, 0.44%)</title><rect x="18.9128%" y="245" width="0.4447%" height="15" fill="rgb(223,33,50)" fg:x="2084" fg:w="49"/><text x="19.1628%" y="255.50"></text></g><g><title>monad_gossip-955ed6b31611c195`DYLD-STUB$$free (2 samples, 0.02%)</title><rect x="19.3575%" y="261" width="0.0182%" height="15" fill="rgb(219,149,13)" fg:x="2133" fg:w="2"/><text x="19.6075%" y="271.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put (159 samples, 1.44%)</title><rect x="17.9417%" y="277" width="1.4430%" height="15" fill="rgb(250,156,29)" fg:x="1977" fg:w="159"/><text x="18.1917%" y="287.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;bytes_utils::segmented::SegmentedBuf&lt;B&gt; as bytes::buf::buf_impl::Buf&gt;::copy_to_bytes (414 samples, 3.76%)</title><rect x="15.6457%" y="293" width="3.7571%" height="15" fill="rgb(216,193,19)" fg:x="1724" fg:w="414"/><text x="15.8957%" y="303.50">mona..</text></g><g><title>monad_gossip-955ed6b31611c195`DYLD-STUB$$memcpy (2 samples, 0.02%)</title><rect x="19.3847%" y="277" width="0.0182%" height="15" fill="rgb(216,135,14)" fg:x="2136" fg:w="2"/><text x="19.6347%" y="287.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,125 samples, 10.21%)</title><rect x="19.4028%" y="293" width="10.2096%" height="15" fill="rgb(241,47,5)" fg:x="2138" fg:w="1125"/><text x="19.6528%" y="303.50">monad_gossip-95..</text></g><g><title>monad_gossip-955ed6b31611c195`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (283 samples, 2.57%)</title><rect x="27.0442%" y="277" width="2.5683%" height="15" fill="rgb(233,42,35)" fg:x="2980" fg:w="283"/><text x="27.2942%" y="287.50">mo..</text></g><g><title>monad_gossip-955ed6b31611c195`blake3::Hasher::update (2 samples, 0.02%)</title><rect x="29.6306%" y="261" width="0.0182%" height="15" fill="rgb(231,13,6)" fg:x="3265" fg:w="2"/><text x="29.8806%" y="271.50"></text></g><g><title>monad_gossip-955ed6b31611c195`blake3::compress_subtree_to_parent_node (2 samples, 0.02%)</title><rect x="29.6306%" y="245" width="0.0182%" height="15" fill="rgb(207,181,40)" fg:x="3265" fg:w="2"/><text x="29.8806%" y="255.50"></text></g><g><title>monad_gossip-955ed6b31611c195`blake3::compress_subtree_wide (2 samples, 0.02%)</title><rect x="29.6306%" y="229" width="0.0182%" height="15" fill="rgb(254,173,49)" fg:x="3265" fg:w="2"/><text x="29.8806%" y="239.50"></text></g><g><title>monad_gossip-955ed6b31611c195`blake3::compress_subtree_wide (2 samples, 0.02%)</title><rect x="29.6306%" y="213" width="0.0182%" height="15" fill="rgb(221,1,38)" fg:x="3265" fg:w="2"/><text x="29.8806%" y="223.50"></text></g><g><title>monad_gossip-955ed6b31611c195`blake3::compress_subtree_wide (2 samples, 0.02%)</title><rect x="29.6306%" y="197" width="0.0182%" height="15" fill="rgb(206,124,46)" fg:x="3265" fg:w="2"/><text x="29.8806%" y="207.50"></text></g><g><title>monad_gossip-955ed6b31611c195`blake3::compress_subtree_wide (2 samples, 0.02%)</title><rect x="29.6306%" y="181" width="0.0182%" height="15" fill="rgb(249,21,11)" fg:x="3265" fg:w="2"/><text x="29.8806%" y="191.50"></text></g><g><title>monad_gossip-955ed6b31611c195`blake3::compress_subtree_wide (2 samples, 0.02%)</title><rect x="29.6306%" y="165" width="0.0182%" height="15" fill="rgb(222,201,40)" fg:x="3265" fg:w="2"/><text x="29.8806%" y="175.50"></text></g><g><title>monad_gossip-955ed6b31611c195`blake3::compress_subtree_wide (2 samples, 0.02%)</title><rect x="29.6306%" y="149" width="0.0182%" height="15" fill="rgb(235,61,29)" fg:x="3265" fg:w="2"/><text x="29.8806%" y="159.50"></text></g><g><title>monad_gossip-955ed6b31611c195`blake3::compress_subtree_wide (2 samples, 0.02%)</title><rect x="29.6306%" y="133" width="0.0182%" height="15" fill="rgb(219,207,3)" fg:x="3265" fg:w="2"/><text x="29.8806%" y="143.50"></text></g><g><title>monad_gossip-955ed6b31611c195`blake3::compress_subtree_wide (2 samples, 0.02%)</title><rect x="29.6306%" y="117" width="0.0182%" height="15" fill="rgb(222,56,46)" fg:x="3265" fg:w="2"/><text x="29.8806%" y="127.50"></text></g><g><title>monad_gossip-955ed6b31611c195`blake3::compress_subtree_wide (2 samples, 0.02%)</title><rect x="29.6306%" y="101" width="0.0182%" height="15" fill="rgb(239,76,54)" fg:x="3265" fg:w="2"/><text x="29.8806%" y="111.50"></text></g><g><title>monad_gossip-955ed6b31611c195`blake3::compress_subtree_wide (2 samples, 0.02%)</title><rect x="29.6306%" y="85" width="0.0182%" height="15" fill="rgb(231,124,27)" fg:x="3265" fg:w="2"/><text x="29.8806%" y="95.50"></text></g><g><title>monad_gossip-955ed6b31611c195`blake3::compress_subtree_wide (2 samples, 0.02%)</title><rect x="29.6306%" y="69" width="0.0182%" height="15" fill="rgb(249,195,6)" fg:x="3265" fg:w="2"/><text x="29.8806%" y="79.50"></text></g><g><title>monad_gossip-955ed6b31611c195`blake3_hash4_neon (2 samples, 0.02%)</title><rect x="29.6306%" y="53" width="0.0182%" height="15" fill="rgb(237,174,47)" fg:x="3265" fg:w="2"/><text x="29.8806%" y="63.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::encoder::SourceBlockEncoder::with_encoding_plan2 (5 samples, 0.05%)</title><rect x="29.6488%" y="229" width="0.0454%" height="15" fill="rgb(206,201,31)" fg:x="3267" fg:w="5"/><text x="29.8988%" y="239.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::operation_vector::perform_op (4 samples, 0.04%)</title><rect x="29.6579%" y="213" width="0.0363%" height="15" fill="rgb(231,57,52)" fg:x="3268" fg:w="4"/><text x="29.9079%" y="223.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::pi_solver::IntermediateSymbolDecoder&lt;T&gt;::first_phase (3 samples, 0.03%)</title><rect x="29.7214%" y="165" width="0.0272%" height="15" fill="rgb(248,177,22)" fg:x="3275" fg:w="3"/><text x="29.9714%" y="175.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::encoder::Encoder::with_defaults (12 samples, 0.11%)</title><rect x="29.6488%" y="261" width="0.1089%" height="15" fill="rgb(215,211,37)" fg:x="3267" fg:w="12"/><text x="29.8988%" y="271.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::encoder::Encoder::new (12 samples, 0.11%)</title><rect x="29.6488%" y="245" width="0.1089%" height="15" fill="rgb(241,128,51)" fg:x="3267" fg:w="12"/><text x="29.8988%" y="255.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::encoder::SourceBlockEncodingPlan::generate (7 samples, 0.06%)</title><rect x="29.6942%" y="229" width="0.0635%" height="15" fill="rgb(227,165,31)" fg:x="3272" fg:w="7"/><text x="29.9442%" y="239.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::encoder::gen_intermediate_symbols (7 samples, 0.06%)</title><rect x="29.6942%" y="213" width="0.0635%" height="15" fill="rgb(228,167,24)" fg:x="3272" fg:w="7"/><text x="29.9442%" y="223.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::pi_solver::fused_inverse_mul_symbols (6 samples, 0.05%)</title><rect x="29.7032%" y="197" width="0.0545%" height="15" fill="rgb(228,143,12)" fg:x="3273" fg:w="6"/><text x="29.9532%" y="207.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::pi_solver::IntermediateSymbolDecoder&lt;T&gt;::execute (4 samples, 0.04%)</title><rect x="29.7214%" y="181" width="0.0363%" height="15" fill="rgb(249,149,8)" fg:x="3275" fg:w="4"/><text x="29.9714%" y="191.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;monad_gossip::seeder::Seeder&lt;C&gt; as monad_gossip::Gossip&gt;::send (15 samples, 0.14%)</title><rect x="29.6306%" y="293" width="0.1361%" height="15" fill="rgb(243,35,44)" fg:x="3265" fg:w="15"/><text x="29.8806%" y="303.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;monad_gossip::seeder::raptor::Raptor&lt;ST&gt; as monad_gossip::seeder::chunker::Chunker&gt;::new_from_message (15 samples, 0.14%)</title><rect x="29.6306%" y="277" width="0.1361%" height="15" fill="rgb(246,89,9)" fg:x="3265" fg:w="15"/><text x="29.8806%" y="287.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;monad_transformer::BytesTransformer&lt;PT&gt; as monad_transformer::Transformer&lt;bytes::bytes::Bytes&gt;&gt;::transform (4 samples, 0.04%)</title><rect x="29.7668%" y="293" width="0.0363%" height="15" fill="rgb(233,213,13)" fg:x="3280" fg:w="4"/><text x="30.0168%" y="303.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;rand_chacha::chacha::ChaCha8Rng as rand_core::RngCore&gt;::fill_bytes (3 samples, 0.03%)</title><rect x="29.8031%" y="293" width="0.0272%" height="15" fill="rgb(233,141,41)" fg:x="3284" fg:w="3"/><text x="30.0531%" y="303.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (125 samples, 1.13%)</title><rect x="29.8303%" y="293" width="1.1344%" height="15" fill="rgb(239,167,4)" fg:x="3287" fg:w="125"/><text x="30.0803%" y="303.50"></text></g><g><title>monad_gossip-955ed6b31611c195`DYLD-STUB$$free (3 samples, 0.03%)</title><rect x="30.9647%" y="293" width="0.0272%" height="15" fill="rgb(209,217,16)" fg:x="3412" fg:w="3"/><text x="31.2147%" y="303.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::pop (167 samples, 1.52%)</title><rect x="31.0282%" y="293" width="1.5156%" height="15" fill="rgb(219,88,35)" fg:x="3419" fg:w="167"/><text x="31.2782%" y="303.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::collections::binary_heap::BinaryHeap&lt;T,A&gt;::sift_up (39 samples, 0.35%)</title><rect x="32.5438%" y="293" width="0.3539%" height="15" fill="rgb(220,193,23)" fg:x="3586" fg:w="39"/><text x="32.7938%" y="303.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.02%)</title><rect x="32.8977%" y="293" width="0.0182%" height="15" fill="rgb(230,90,52)" fg:x="3625" fg:w="2"/><text x="33.1477%" y="303.50"></text></g><g><title>monad_gossip-955ed6b31611c195`core::hash::BuildHasher::hash_one (4 samples, 0.04%)</title><rect x="32.9340%" y="293" width="0.0363%" height="15" fill="rgb(252,106,19)" fg:x="3629" fg:w="4"/><text x="33.1840%" y="303.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (123 samples, 1.12%)</title><rect x="32.9703%" y="277" width="1.1163%" height="15" fill="rgb(206,74,20)" fg:x="3633" fg:w="123"/><text x="33.2203%" y="287.50"></text></g><g><title>monad_gossip-955ed6b31611c195`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (258 samples, 2.34%)</title><rect x="32.9703%" y="293" width="2.3414%" height="15" fill="rgb(230,138,44)" fg:x="3633" fg:w="258"/><text x="33.2203%" y="303.50">m..</text></g><g><title>monad_gossip-955ed6b31611c195`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (135 samples, 1.23%)</title><rect x="34.0866%" y="277" width="1.2252%" height="15" fill="rgb(235,182,43)" fg:x="3756" fg:w="135"/><text x="34.3366%" y="287.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (135 samples, 1.23%)</title><rect x="34.0866%" y="261" width="1.2252%" height="15" fill="rgb(242,16,51)" fg:x="3756" fg:w="135"/><text x="34.3366%" y="271.50"></text></g><g><title>monad_gossip-955ed6b31611c195`hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (10 samples, 0.09%)</title><rect x="35.3117%" y="293" width="0.0908%" height="15" fill="rgb(248,9,4)" fg:x="3891" fg:w="10"/><text x="35.5617%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (10 samples, 0.09%)</title><rect x="35.3117%" y="277" width="0.0908%" height="15" fill="rgb(210,31,22)" fg:x="3891" fg:w="10"/><text x="35.5617%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.04%)</title><rect x="35.4479%" y="245" width="0.0363%" height="15" fill="rgb(239,54,39)" fg:x="3906" fg:w="4"/><text x="35.6979%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.02%)</title><rect x="35.4660%" y="229" width="0.0182%" height="15" fill="rgb(230,99,41)" fg:x="3908" fg:w="2"/><text x="35.7160%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.05%)</title><rect x="35.4388%" y="277" width="0.0545%" height="15" fill="rgb(253,106,12)" fg:x="3905" fg:w="6"/><text x="35.6888%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.05%)</title><rect x="35.4479%" y="261" width="0.0454%" height="15" fill="rgb(213,46,41)" fg:x="3906" fg:w="5"/><text x="35.6979%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.02%)</title><rect x="35.4932%" y="277" width="0.0182%" height="15" fill="rgb(215,133,35)" fg:x="3911" fg:w="2"/><text x="35.7432%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.04%)</title><rect x="35.7201%" y="197" width="0.0363%" height="15" fill="rgb(213,28,5)" fg:x="3936" fg:w="4"/><text x="35.9701%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.08%)</title><rect x="35.6929%" y="229" width="0.0817%" height="15" fill="rgb(215,77,49)" fg:x="3933" fg:w="9"/><text x="35.9429%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.05%)</title><rect x="35.7201%" y="213" width="0.0545%" height="15" fill="rgb(248,100,22)" fg:x="3936" fg:w="6"/><text x="35.9701%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.02%)</title><rect x="35.7564%" y="197" width="0.0182%" height="15" fill="rgb(208,67,9)" fg:x="3940" fg:w="2"/><text x="36.0064%" y="207.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;bytes_utils::segmented::SegmentedBuf&lt;B&gt; as bytes::buf::buf_impl::Buf&gt;::copy_to_bytes (30 samples, 0.27%)</title><rect x="35.5114%" y="277" width="0.2723%" height="15" fill="rgb(219,133,21)" fg:x="3913" fg:w="30"/><text x="35.7614%" y="287.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;bytes::bytes::Bytes as bytes::buf::buf_impl::Buf&gt;::copy_to_bytes (24 samples, 0.22%)</title><rect x="35.5658%" y="261" width="0.2178%" height="15" fill="rgb(246,46,29)" fg:x="3919" fg:w="24"/><text x="35.8158%" y="271.50"></text></g><g><title>monad_gossip-955ed6b31611c195`bytes::bytes::shallow_clone_vec (11 samples, 0.10%)</title><rect x="35.6838%" y="245" width="0.0998%" height="15" fill="rgb(246,185,52)" fg:x="3932" fg:w="11"/><text x="35.9338%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (11 samples, 0.10%)</title><rect x="35.8290%" y="261" width="0.0998%" height="15" fill="rgb(252,136,11)" fg:x="3948" fg:w="11"/><text x="36.0790%" y="271.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.02%)</title><rect x="36.0559%" y="245" width="0.0182%" height="15" fill="rgb(219,138,53)" fg:x="3973" fg:w="2"/><text x="36.3059%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.02%)</title><rect x="36.0922%" y="213" width="0.0182%" height="15" fill="rgb(211,51,23)" fg:x="3977" fg:w="2"/><text x="36.3422%" y="223.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (12 samples, 0.11%)</title><rect x="36.1104%" y="213" width="0.1089%" height="15" fill="rgb(247,221,28)" fg:x="3979" fg:w="12"/><text x="36.3604%" y="223.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;monad_crypto::NopSignature as monad_crypto::certificate_signature::CertificateSignature&gt;::deserialize (8 samples, 0.07%)</title><rect x="36.2193%" y="213" width="0.0726%" height="15" fill="rgb(251,222,45)" fg:x="3991" fg:w="8"/><text x="36.4693%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.03%)</title><rect x="36.3009%" y="197" width="0.0272%" height="15" fill="rgb(217,162,53)" fg:x="4000" fg:w="3"/><text x="36.5509%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.02%)</title><rect x="36.3100%" y="181" width="0.0182%" height="15" fill="rgb(229,93,14)" fg:x="4001" fg:w="2"/><text x="36.5600%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.02%)</title><rect x="36.3282%" y="197" width="0.0182%" height="15" fill="rgb(209,67,49)" fg:x="4003" fg:w="2"/><text x="36.5782%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.04%)</title><rect x="36.6004%" y="149" width="0.0363%" height="15" fill="rgb(213,87,29)" fg:x="4033" fg:w="4"/><text x="36.8504%" y="159.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (33 samples, 0.30%)</title><rect x="36.3463%" y="197" width="0.2995%" height="15" fill="rgb(205,151,52)" fg:x="4005" fg:w="33"/><text x="36.5963%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.06%)</title><rect x="36.5823%" y="181" width="0.0635%" height="15" fill="rgb(253,215,39)" fg:x="4031" fg:w="7"/><text x="36.8323%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.05%)</title><rect x="36.6004%" y="165" width="0.0454%" height="15" fill="rgb(221,220,41)" fg:x="4033" fg:w="5"/><text x="36.8504%" y="175.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (80 samples, 0.73%)</title><rect x="35.9289%" y="261" width="0.7260%" height="15" fill="rgb(218,133,21)" fg:x="3959" fg:w="80"/><text x="36.1789%" y="271.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;monad_gossip::seeder::_::&lt;impl serde::de::Deserialize for monad_gossip::seeder::ProtocolHeader&lt;M,C&gt;&gt;::deserialize::__Visitor&lt;M,C&gt; as serde::de::Visitor&gt;::visit_enum (64 samples, 0.58%)</title><rect x="36.0741%" y="245" width="0.5808%" height="15" fill="rgb(221,193,43)" fg:x="3975" fg:w="64"/><text x="36.3241%" y="255.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (63 samples, 0.57%)</title><rect x="36.0831%" y="229" width="0.5717%" height="15" fill="rgb(240,128,52)" fg:x="3976" fg:w="63"/><text x="36.3331%" y="239.50"></text></g><g><title>monad_gossip-955ed6b31611c195`monad_gossip::seeder::raptor::signature_serde::deserialize (39 samples, 0.35%)</title><rect x="36.3009%" y="213" width="0.3539%" height="15" fill="rgb(253,114,12)" fg:x="4000" fg:w="39"/><text x="36.5509%" y="223.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;bytes::bytes::Bytes as bytes::buf::buf_impl::Buf&gt;::copy_to_bytes (17 samples, 0.15%)</title><rect x="36.6549%" y="261" width="0.1543%" height="15" fill="rgb(215,223,47)" fg:x="4039" fg:w="17"/><text x="36.9049%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (107 samples, 0.97%)</title><rect x="37.7620%" y="245" width="0.9711%" height="15" fill="rgb(248,225,23)" fg:x="4161" fg:w="107"/><text x="38.0120%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (4 samples, 0.04%)</title><rect x="38.9963%" y="181" width="0.0363%" height="15" fill="rgb(250,108,0)" fg:x="4297" fg:w="4"/><text x="39.2463%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (2 samples, 0.02%)</title><rect x="39.0326%" y="181" width="0.0182%" height="15" fill="rgb(228,208,7)" fg:x="4301" fg:w="2"/><text x="39.2826%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.02%)</title><rect x="39.0326%" y="165" width="0.0182%" height="15" fill="rgb(244,45,10)" fg:x="4301" fg:w="2"/><text x="39.2826%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.08%)</title><rect x="38.9872%" y="213" width="0.0817%" height="15" fill="rgb(207,125,25)" fg:x="4296" fg:w="9"/><text x="39.2372%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (9 samples, 0.08%)</title><rect x="38.9872%" y="197" width="0.0817%" height="15" fill="rgb(210,195,18)" fg:x="4296" fg:w="9"/><text x="39.2372%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.11%)</title><rect x="38.9691%" y="229" width="0.1089%" height="15" fill="rgb(249,80,12)" fg:x="4294" fg:w="12"/><text x="39.2191%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.03%)</title><rect x="40.1942%" y="197" width="0.0272%" height="15" fill="rgb(221,65,9)" fg:x="4429" fg:w="3"/><text x="40.4442%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5 samples, 0.05%)</title><rect x="40.2396%" y="181" width="0.0454%" height="15" fill="rgb(235,49,36)" fg:x="4434" fg:w="5"/><text x="40.4896%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (28 samples, 0.25%)</title><rect x="40.4120%" y="165" width="0.2541%" height="15" fill="rgb(225,32,20)" fg:x="4453" fg:w="28"/><text x="40.6620%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (65 samples, 0.59%)</title><rect x="40.2214%" y="197" width="0.5899%" height="15" fill="rgb(215,141,46)" fg:x="4432" fg:w="65"/><text x="40.4714%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (58 samples, 0.53%)</title><rect x="40.2850%" y="181" width="0.5264%" height="15" fill="rgb(250,160,47)" fg:x="4439" fg:w="58"/><text x="40.5350%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (15 samples, 0.14%)</title><rect x="40.6752%" y="165" width="0.1361%" height="15" fill="rgb(216,222,40)" fg:x="4482" fg:w="15"/><text x="40.9252%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (80 samples, 0.73%)</title><rect x="40.1035%" y="213" width="0.7260%" height="15" fill="rgb(234,217,39)" fg:x="4419" fg:w="80"/><text x="40.3535%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.02%)</title><rect x="40.8113%" y="197" width="0.0182%" height="15" fill="rgb(207,178,40)" fg:x="4497" fg:w="2"/><text x="41.0613%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.04%)</title><rect x="40.8386%" y="213" width="0.0363%" height="15" fill="rgb(221,136,13)" fg:x="4500" fg:w="4"/><text x="41.0886%" y="223.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (200 samples, 1.82%)</title><rect x="39.0780%" y="229" width="1.8150%" height="15" fill="rgb(249,199,10)" fg:x="4306" fg:w="200"/><text x="39.3280%" y="239.50">m..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.02%)</title><rect x="40.8749%" y="213" width="0.0182%" height="15" fill="rgb(249,222,13)" fg:x="4504" fg:w="2"/><text x="41.1249%" y="223.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (239 samples, 2.17%)</title><rect x="38.7331%" y="245" width="2.1690%" height="15" fill="rgb(244,185,38)" fg:x="4268" fg:w="239"/><text x="38.9831%" y="255.50">m..</text></g><g><title>monad_gossip-955ed6b31611c195`blake3::Hasher::final_output (6 samples, 0.05%)</title><rect x="40.9112%" y="213" width="0.0545%" height="15" fill="rgb(236,202,9)" fg:x="4508" fg:w="6"/><text x="41.1612%" y="223.50"></text></g><g><title>monad_gossip-955ed6b31611c195`blake3::Hasher::finalize (34 samples, 0.31%)</title><rect x="40.9112%" y="229" width="0.3086%" height="15" fill="rgb(250,229,37)" fg:x="4508" fg:w="34"/><text x="41.1612%" y="239.50"></text></g><g><title>monad_gossip-955ed6b31611c195`blake3::portable::compress_in_place (28 samples, 0.25%)</title><rect x="40.9656%" y="213" width="0.2541%" height="15" fill="rgb(206,174,23)" fg:x="4514" fg:w="28"/><text x="41.2156%" y="223.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;monad_crypto::hasher::Blake3Hash as monad_crypto::hasher::Hasher&gt;::hash (55 samples, 0.50%)</title><rect x="40.9021%" y="245" width="0.4991%" height="15" fill="rgb(211,33,43)" fg:x="4507" fg:w="55"/><text x="41.1521%" y="255.50"></text></g><g><title>monad_gossip-955ed6b31611c195`blake3::portable::compress_in_place (20 samples, 0.18%)</title><rect x="41.2197%" y="229" width="0.1815%" height="15" fill="rgb(245,58,50)" fg:x="4542" fg:w="20"/><text x="41.4697%" y="239.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (24 samples, 0.22%)</title><rect x="41.4103%" y="245" width="0.2178%" height="15" fill="rgb(244,68,36)" fg:x="4563" fg:w="24"/><text x="41.6603%" y="255.50"></text></g><g><title>monad_gossip-955ed6b31611c195`blake3::ChunkState::update (4 samples, 0.04%)</title><rect x="41.6281%" y="245" width="0.0363%" height="15" fill="rgb(232,229,15)" fg:x="4587" fg:w="4"/><text x="41.8781%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.03%)</title><rect x="41.7279%" y="229" width="0.0272%" height="15" fill="rgb(254,30,23)" fg:x="4598" fg:w="3"/><text x="41.9779%" y="239.50"></text></g><g><title>monad_gossip-955ed6b31611c195`blake3::ChunkState::update (7 samples, 0.06%)</title><rect x="41.7552%" y="229" width="0.0635%" height="15" fill="rgb(235,160,14)" fg:x="4601" fg:w="7"/><text x="42.0052%" y="239.50"></text></g><g><title>monad_gossip-955ed6b31611c195`blake3::Hasher::update (442 samples, 4.01%)</title><rect x="41.6644%" y="245" width="4.0113%" height="15" fill="rgb(212,155,44)" fg:x="4591" fg:w="442"/><text x="41.9144%" y="255.50">mona..</text></g><g><title>monad_gossip-955ed6b31611c195`blake3::portable::compress_in_place (425 samples, 3.86%)</title><rect x="41.8187%" y="229" width="3.8570%" height="15" fill="rgb(226,2,50)" fg:x="4608" fg:w="425"/><text x="42.0687%" y="239.50">mona..</text></g><g><title>monad_gossip-955ed6b31611c195`blake3::portable::compress_in_place (47 samples, 0.43%)</title><rect x="45.6757%" y="245" width="0.4265%" height="15" fill="rgb(234,177,6)" fg:x="5033" fg:w="47"/><text x="45.9257%" y="255.50"></text></g><g><title>monad_gossip-955ed6b31611c195`blake3::Hasher::finalize (3 samples, 0.03%)</title><rect x="46.1203%" y="213" width="0.0272%" height="15" fill="rgb(217,24,9)" fg:x="5082" fg:w="3"/><text x="46.3703%" y="223.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;monad_crypto::hasher::Blake3Hash as monad_crypto::hasher::Hasher&gt;::hash (37 samples, 0.34%)</title><rect x="46.1203%" y="229" width="0.3358%" height="15" fill="rgb(220,13,46)" fg:x="5082" fg:w="37"/><text x="46.3703%" y="239.50"></text></g><g><title>monad_gossip-955ed6b31611c195`blake3::portable::compress_in_place (34 samples, 0.31%)</title><rect x="46.1476%" y="213" width="0.3086%" height="15" fill="rgb(239,221,27)" fg:x="5085" fg:w="34"/><text x="46.3976%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.02%)</title><rect x="46.4924%" y="213" width="0.0182%" height="15" fill="rgb(222,198,25)" fg:x="5123" fg:w="2"/><text x="46.7424%" y="223.50"></text></g><g><title>monad_gossip-955ed6b31611c195`monad_gossip::seeder::raptor::RaptorMeta&lt;ST&gt;::compute_id (47 samples, 0.43%)</title><rect x="46.1022%" y="245" width="0.4265%" height="15" fill="rgb(211,99,13)" fg:x="5080" fg:w="47"/><text x="46.3522%" y="255.50"></text></g><g><title>monad_gossip-955ed6b31611c195`blake3::Hasher::update (6 samples, 0.05%)</title><rect x="46.4743%" y="229" width="0.0545%" height="15" fill="rgb(232,111,31)" fg:x="5121" fg:w="6"/><text x="46.7243%" y="239.50"></text></g><g><title>monad_gossip-955ed6b31611c195`blake3::ChunkState::update (2 samples, 0.02%)</title><rect x="46.5106%" y="213" width="0.0182%" height="15" fill="rgb(245,82,37)" fg:x="5125" fg:w="2"/><text x="46.7606%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.06%)</title><rect x="46.5469%" y="229" width="0.0635%" height="15" fill="rgb(227,149,46)" fg:x="5129" fg:w="7"/><text x="46.7969%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.03%)</title><rect x="46.5832%" y="213" width="0.0272%" height="15" fill="rgb(218,36,50)" fg:x="5133" fg:w="3"/><text x="46.8332%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3 samples, 0.03%)</title><rect x="46.5832%" y="197" width="0.0272%" height="15" fill="rgb(226,80,48)" fg:x="5133" fg:w="3"/><text x="46.8332%" y="207.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::base::EncodingPacket::deserialize (11 samples, 0.10%)</title><rect x="46.5287%" y="245" width="0.0998%" height="15" fill="rgb(238,224,15)" fg:x="5127" fg:w="11"/><text x="46.7787%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (71 samples, 0.64%)</title><rect x="46.6739%" y="229" width="0.6443%" height="15" fill="rgb(241,136,10)" fg:x="5143" fg:w="71"/><text x="46.9239%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (5 samples, 0.05%)</title><rect x="48.7249%" y="213" width="0.0454%" height="15" fill="rgb(208,32,45)" fg:x="5369" fg:w="5"/><text x="48.9749%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.05%)</title><rect x="48.7249%" y="197" width="0.0454%" height="15" fill="rgb(207,135,9)" fg:x="5369" fg:w="5"/><text x="48.9749%" y="207.50"></text></g><g><title>libsystem_platform.dylib`__bzero (5 samples, 0.05%)</title><rect x="48.7249%" y="181" width="0.0454%" height="15" fill="rgb(206,86,44)" fg:x="5369" fg:w="5"/><text x="48.9749%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.02%)</title><rect x="48.7975%" y="197" width="0.0182%" height="15" fill="rgb(245,177,15)" fg:x="5377" fg:w="2"/><text x="49.0475%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.02%)</title><rect x="48.8611%" y="149" width="0.0182%" height="15" fill="rgb(206,64,50)" fg:x="5384" fg:w="2"/><text x="49.1111%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.13%)</title><rect x="48.7703%" y="213" width="0.1271%" height="15" fill="rgb(234,36,40)" fg:x="5374" fg:w="14"/><text x="49.0203%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.08%)</title><rect x="48.8157%" y="197" width="0.0817%" height="15" fill="rgb(213,64,8)" fg:x="5379" fg:w="9"/><text x="49.0657%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (9 samples, 0.08%)</title><rect x="48.8157%" y="181" width="0.0817%" height="15" fill="rgb(210,75,36)" fg:x="5379" fg:w="9"/><text x="49.0657%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (8 samples, 0.07%)</title><rect x="48.8248%" y="165" width="0.0726%" height="15" fill="rgb(229,88,21)" fg:x="5380" fg:w="8"/><text x="49.0748%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_size (2 samples, 0.02%)</title><rect x="48.9155%" y="197" width="0.0182%" height="15" fill="rgb(252,204,47)" fg:x="5390" fg:w="2"/><text x="49.1655%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.05%)</title><rect x="48.8974%" y="213" width="0.0545%" height="15" fill="rgb(208,77,27)" fg:x="5388" fg:w="6"/><text x="49.1474%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.02%)</title><rect x="48.9337%" y="197" width="0.0182%" height="15" fill="rgb(221,76,26)" fg:x="5392" fg:w="2"/><text x="49.1837%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.02%)</title><rect x="48.9337%" y="181" width="0.0182%" height="15" fill="rgb(225,139,18)" fg:x="5392" fg:w="2"/><text x="49.1837%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (13 samples, 0.12%)</title><rect x="48.9518%" y="213" width="0.1180%" height="15" fill="rgb(230,137,11)" fg:x="5394" fg:w="13"/><text x="49.2018%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (8 samples, 0.07%)</title><rect x="48.9972%" y="197" width="0.0726%" height="15" fill="rgb(212,28,1)" fg:x="5399" fg:w="8"/><text x="49.2472%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (68 samples, 0.62%)</title><rect x="49.0970%" y="213" width="0.6171%" height="15" fill="rgb(248,164,17)" fg:x="5410" fg:w="68"/><text x="49.3470%" y="223.50"></text></g><g><title>monad_gossip-955ed6b31611c195`DYLD-STUB$$free (2 samples, 0.02%)</title><rect x="49.7141%" y="213" width="0.0182%" height="15" fill="rgb(222,171,42)" fg:x="5478" fg:w="2"/><text x="49.9641%" y="223.50"></text></g><g><title>monad_gossip-955ed6b31611c195`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (15 samples, 0.14%)</title><rect x="49.7504%" y="213" width="0.1361%" height="15" fill="rgb(243,84,45)" fg:x="5482" fg:w="15"/><text x="50.0004%" y="223.50"></text></g><g><title>monad_gossip-955ed6b31611c195`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (8 samples, 0.07%)</title><rect x="49.8140%" y="197" width="0.0726%" height="15" fill="rgb(252,49,23)" fg:x="5489" fg:w="8"/><text x="50.0640%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.03%)</title><rect x="50.1316%" y="197" width="0.0272%" height="15" fill="rgb(215,19,7)" fg:x="5524" fg:w="3"/><text x="50.3816%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.02%)</title><rect x="50.1407%" y="181" width="0.0182%" height="15" fill="rgb(238,81,41)" fg:x="5525" fg:w="2"/><text x="50.3907%" y="191.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;raptorq::sparse_matrix::SparseBinaryMatrix as raptorq::matrix::BinaryMatrix&gt;::set (9 samples, 0.08%)</title><rect x="50.1951%" y="197" width="0.0817%" height="15" fill="rgb(210,199,37)" fg:x="5531" fg:w="9"/><text x="50.4451%" y="207.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::sparse_vec::SparseBinaryVec::insert (7 samples, 0.06%)</title><rect x="50.2133%" y="181" width="0.0635%" height="15" fill="rgb(244,192,49)" fg:x="5533" fg:w="7"/><text x="50.4633%" y="191.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.03%)</title><rect x="50.2496%" y="165" width="0.0272%" height="15" fill="rgb(226,211,11)" fg:x="5537" fg:w="3"/><text x="50.4996%" y="175.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::raw_vec::finish_grow (3 samples, 0.03%)</title><rect x="50.2496%" y="149" width="0.0272%" height="15" fill="rgb(236,162,54)" fg:x="5537" fg:w="3"/><text x="50.4996%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (3 samples, 0.03%)</title><rect x="50.2496%" y="133" width="0.0272%" height="15" fill="rgb(220,229,9)" fg:x="5537" fg:w="3"/><text x="50.4996%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="50.2949%" y="133" width="0.0182%" height="15" fill="rgb(250,87,22)" fg:x="5542" fg:w="2"/><text x="50.5449%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.05%)</title><rect x="50.2768%" y="165" width="0.0454%" height="15" fill="rgb(239,43,17)" fg:x="5540" fg:w="5"/><text x="50.5268%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.03%)</title><rect x="50.2949%" y="149" width="0.0272%" height="15" fill="rgb(231,177,25)" fg:x="5542" fg:w="3"/><text x="50.5449%" y="159.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (8 samples, 0.07%)</title><rect x="50.2768%" y="197" width="0.0726%" height="15" fill="rgb(219,179,1)" fg:x="5540" fg:w="8"/><text x="50.5268%" y="207.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::raw_vec::finish_grow (8 samples, 0.07%)</title><rect x="50.2768%" y="181" width="0.0726%" height="15" fill="rgb(238,219,53)" fg:x="5540" fg:w="8"/><text x="50.5268%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (3 samples, 0.03%)</title><rect x="50.3222%" y="165" width="0.0272%" height="15" fill="rgb(232,167,36)" fg:x="5545" fg:w="3"/><text x="50.5722%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.02%)</title><rect x="50.3312%" y="149" width="0.0182%" height="15" fill="rgb(244,19,51)" fg:x="5546" fg:w="2"/><text x="50.5812%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.02%)</title><rect x="50.3312%" y="133" width="0.0182%" height="15" fill="rgb(224,6,22)" fg:x="5546" fg:w="2"/><text x="50.5812%" y="143.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::base::intermediate_tuple (7 samples, 0.06%)</title><rect x="50.3494%" y="197" width="0.0635%" height="15" fill="rgb(224,145,5)" fg:x="5548" fg:w="7"/><text x="50.5994%" y="207.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::constraint_matrix::enc_indices (5 samples, 0.05%)</title><rect x="50.4129%" y="197" width="0.0454%" height="15" fill="rgb(234,130,49)" fg:x="5555" fg:w="5"/><text x="50.6629%" y="207.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::constraint_matrix::generate_constraint_matrix (79 samples, 0.72%)</title><rect x="49.8956%" y="213" width="0.7169%" height="15" fill="rgb(254,6,2)" fg:x="5498" fg:w="79"/><text x="50.1456%" y="223.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::constraint_matrix::generate_hdpc_rows (17 samples, 0.15%)</title><rect x="50.4583%" y="197" width="0.1543%" height="15" fill="rgb(208,96,46)" fg:x="5560" fg:w="17"/><text x="50.7083%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.02%)</title><rect x="50.7850%" y="197" width="0.0182%" height="15" fill="rgb(239,3,39)" fg:x="5596" fg:w="2"/><text x="51.0350%" y="207.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::decoder::SourceBlockDecoder::rebuild_source_symbol (22 samples, 0.20%)</title><rect x="50.6126%" y="213" width="0.1997%" height="15" fill="rgb(233,210,1)" fg:x="5577" fg:w="22"/><text x="50.8626%" y="223.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::decoder::SourceBlockDecoder::unpack_sub_blocks (6 samples, 0.05%)</title><rect x="50.8122%" y="213" width="0.0545%" height="15" fill="rgb(244,137,37)" fg:x="5599" fg:w="6"/><text x="51.0622%" y="223.50"></text></g><g><title>monad_gossip-955ed6b31611c195`core::slice::sort::insertion_sort_shift_left (6 samples, 0.05%)</title><rect x="51.3114%" y="101" width="0.0545%" height="15" fill="rgb(240,136,2)" fg:x="5654" fg:w="6"/><text x="51.5614%" y="111.50"></text></g><g><title>monad_gossip-955ed6b31611c195`core::slice::sort::insertion_sort_shift_left (6 samples, 0.05%)</title><rect x="51.4021%" y="85" width="0.0545%" height="15" fill="rgb(239,18,37)" fg:x="5664" fg:w="6"/><text x="51.6521%" y="95.50"></text></g><g><title>monad_gossip-955ed6b31611c195`core::slice::sort::insertion_sort_shift_left (3 samples, 0.03%)</title><rect x="51.4929%" y="69" width="0.0272%" height="15" fill="rgb(218,185,22)" fg:x="5674" fg:w="3"/><text x="51.7429%" y="79.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;raptorq::sparse_matrix::SparseBinaryMatrix as raptorq::matrix::BinaryMatrix&gt;::enable_column_access_acceleration (75 samples, 0.68%)</title><rect x="50.8848%" y="197" width="0.6806%" height="15" fill="rgb(225,218,4)" fg:x="5607" fg:w="75"/><text x="51.1348%" y="207.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::arraymap::ImmutableListMapBuilder::build (66 samples, 0.60%)</title><rect x="50.9665%" y="181" width="0.5990%" height="15" fill="rgb(230,182,32)" fg:x="5616" fg:w="66"/><text x="51.2165%" y="191.50"></text></g><g><title>monad_gossip-955ed6b31611c195`core::slice::sort::recurse (56 samples, 0.51%)</title><rect x="51.0573%" y="165" width="0.5082%" height="15" fill="rgb(242,56,43)" fg:x="5626" fg:w="56"/><text x="51.3073%" y="175.50"></text></g><g><title>monad_gossip-955ed6b31611c195`core::slice::sort::recurse (50 samples, 0.45%)</title><rect x="51.1117%" y="149" width="0.4538%" height="15" fill="rgb(233,99,24)" fg:x="5632" fg:w="50"/><text x="51.3617%" y="159.50"></text></g><g><title>monad_gossip-955ed6b31611c195`core::slice::sort::recurse (43 samples, 0.39%)</title><rect x="51.1752%" y="133" width="0.3902%" height="15" fill="rgb(234,209,42)" fg:x="5639" fg:w="43"/><text x="51.4252%" y="143.50"></text></g><g><title>monad_gossip-955ed6b31611c195`core::slice::sort::recurse (34 samples, 0.31%)</title><rect x="51.2569%" y="117" width="0.3086%" height="15" fill="rgb(227,7,12)" fg:x="5648" fg:w="34"/><text x="51.5069%" y="127.50"></text></g><g><title>monad_gossip-955ed6b31611c195`core::slice::sort::recurse (22 samples, 0.20%)</title><rect x="51.3658%" y="101" width="0.1997%" height="15" fill="rgb(245,203,43)" fg:x="5660" fg:w="22"/><text x="51.6158%" y="111.50"></text></g><g><title>monad_gossip-955ed6b31611c195`core::slice::sort::recurse (12 samples, 0.11%)</title><rect x="51.4566%" y="85" width="0.1089%" height="15" fill="rgb(238,205,33)" fg:x="5670" fg:w="12"/><text x="51.7066%" y="95.50"></text></g><g><title>monad_gossip-955ed6b31611c195`core::slice::sort::recurse (5 samples, 0.05%)</title><rect x="51.5201%" y="69" width="0.0454%" height="15" fill="rgb(231,56,7)" fg:x="5677" fg:w="5"/><text x="51.7701%" y="79.50"></text></g><g><title>monad_gossip-955ed6b31611c195`core::slice::sort::insertion_sort_shift_left (3 samples, 0.03%)</title><rect x="51.5383%" y="53" width="0.0272%" height="15" fill="rgb(244,186,29)" fg:x="5679" fg:w="3"/><text x="51.7883%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.02%)</title><rect x="51.5927%" y="165" width="0.0182%" height="15" fill="rgb(234,111,31)" fg:x="5685" fg:w="2"/><text x="51.8427%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.02%)</title><rect x="51.6109%" y="165" width="0.0182%" height="15" fill="rgb(241,149,10)" fg:x="5687" fg:w="2"/><text x="51.8609%" y="175.50"></text></g><g><title>monad_gossip-955ed6b31611c195`core::ptr::drop_in_place&lt;raptorq::pi_solver::IntermediateSymbolDecoder&lt;raptorq::sparse_matrix::SparseBinaryMatrix&gt;&gt; (9 samples, 0.08%)</title><rect x="51.5655%" y="197" width="0.0817%" height="15" fill="rgb(249,206,44)" fg:x="5682" fg:w="9"/><text x="51.8155%" y="207.50"></text></g><g><title>monad_gossip-955ed6b31611c195`core::ptr::drop_in_place&lt;raptorq::sparse_matrix::SparseBinaryMatrix&gt; (6 samples, 0.05%)</title><rect x="51.5927%" y="181" width="0.0545%" height="15" fill="rgb(251,153,30)" fg:x="5685" fg:w="6"/><text x="51.8427%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.02%)</title><rect x="51.6290%" y="165" width="0.0182%" height="15" fill="rgb(239,152,38)" fg:x="5689" fg:w="2"/><text x="51.8790%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.02%)</title><rect x="51.6744%" y="181" width="0.0182%" height="15" fill="rgb(249,139,47)" fg:x="5694" fg:w="2"/><text x="51.9244%" y="191.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;raptorq::sparse_matrix::SparseBinaryMatrix as raptorq::matrix::BinaryMatrix&gt;::add_assign_rows (3 samples, 0.03%)</title><rect x="51.7107%" y="181" width="0.0272%" height="15" fill="rgb(244,64,35)" fg:x="5698" fg:w="3"/><text x="51.9607%" y="191.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;raptorq::symbol::Symbol as core::ops::arith::AddAssign&lt;&amp;raptorq::symbol::Symbol&gt;&gt;::add_assign (251 samples, 2.28%)</title><rect x="53.0629%" y="165" width="2.2779%" height="15" fill="rgb(216,46,15)" fg:x="5847" fg:w="251"/><text x="53.3129%" y="175.50">m..</text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::pi_solver::IntermediateSymbolDecoder&lt;T&gt;::apply_deferred_symbol_ops (419 samples, 3.80%)</title><rect x="51.7561%" y="181" width="3.8025%" height="15" fill="rgb(250,74,19)" fg:x="5703" fg:w="419"/><text x="52.0061%" y="191.50">mona..</text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::util::get_both_indices (24 samples, 0.22%)</title><rect x="55.3408%" y="165" width="0.2178%" height="15" fill="rgb(249,42,33)" fg:x="6098" fg:w="24"/><text x="55.5908%" y="175.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::pi_solver::IntermediateSymbolDecoder&lt;T&gt;::fifth_phase (3 samples, 0.03%)</title><rect x="55.5586%" y="181" width="0.0272%" height="15" fill="rgb(242,149,17)" fg:x="6122" fg:w="3"/><text x="55.8086%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.05%)</title><rect x="55.8490%" y="165" width="0.0545%" height="15" fill="rgb(244,29,21)" fg:x="6154" fg:w="6"/><text x="56.0990%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.04%)</title><rect x="55.8671%" y="149" width="0.0363%" height="15" fill="rgb(220,130,37)" fg:x="6156" fg:w="4"/><text x="56.1171%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.02%)</title><rect x="55.9034%" y="165" width="0.0182%" height="15" fill="rgb(211,67,2)" fg:x="6160" fg:w="2"/><text x="56.1534%" y="175.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (17 samples, 0.15%)</title><rect x="55.9307%" y="165" width="0.1543%" height="15" fill="rgb(235,68,52)" fg:x="6163" fg:w="17"/><text x="56.1807%" y="175.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;raptorq::sparse_matrix::SparseBinaryMatrix as raptorq::matrix::BinaryMatrix&gt;::add_assign_rows (14 samples, 0.13%)</title><rect x="56.0849%" y="165" width="0.1271%" height="15" fill="rgb(246,142,3)" fg:x="6180" fg:w="14"/><text x="56.3349%" y="175.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;raptorq::sparse_matrix::SparseBinaryMatrix as raptorq::matrix::BinaryMatrix&gt;::get (4 samples, 0.04%)</title><rect x="56.2120%" y="165" width="0.0363%" height="15" fill="rgb(241,25,7)" fg:x="6194" fg:w="4"/><text x="56.4620%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.04%)</title><rect x="56.4661%" y="117" width="0.0363%" height="15" fill="rgb(242,119,39)" fg:x="6222" fg:w="4"/><text x="56.7161%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.03%)</title><rect x="56.4752%" y="101" width="0.0272%" height="15" fill="rgb(241,98,45)" fg:x="6223" fg:w="3"/><text x="56.7252%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="56.4843%" y="85" width="0.0182%" height="15" fill="rgb(254,28,30)" fg:x="6224" fg:w="2"/><text x="56.7343%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.02%)</title><rect x="56.5024%" y="117" width="0.0182%" height="15" fill="rgb(241,142,54)" fg:x="6226" fg:w="2"/><text x="56.7524%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.03%)</title><rect x="56.5750%" y="69" width="0.0272%" height="15" fill="rgb(222,85,15)" fg:x="6234" fg:w="3"/><text x="56.8250%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (7 samples, 0.06%)</title><rect x="56.5478%" y="85" width="0.0635%" height="15" fill="rgb(210,85,47)" fg:x="6231" fg:w="7"/><text x="56.7978%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (11 samples, 0.10%)</title><rect x="56.5206%" y="101" width="0.0998%" height="15" fill="rgb(224,206,25)" fg:x="6228" fg:w="11"/><text x="56.7706%" y="111.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (24 samples, 0.22%)</title><rect x="56.4207%" y="149" width="0.2178%" height="15" fill="rgb(243,201,19)" fg:x="6217" fg:w="24"/><text x="56.6707%" y="159.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::raw_vec::finish_grow (20 samples, 0.18%)</title><rect x="56.4570%" y="133" width="0.1815%" height="15" fill="rgb(236,59,4)" fg:x="6221" fg:w="20"/><text x="56.7070%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (13 samples, 0.12%)</title><rect x="56.5206%" y="117" width="0.1180%" height="15" fill="rgb(254,179,45)" fg:x="6228" fg:w="13"/><text x="56.7706%" y="127.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;raptorq::sparse_matrix::SparseBinaryMatrix as raptorq::matrix::BinaryMatrix&gt;::get_ones_in_column (44 samples, 0.40%)</title><rect x="56.2483%" y="165" width="0.3993%" height="15" fill="rgb(226,14,10)" fg:x="6198" fg:w="44"/><text x="56.4983%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="56.6839%" y="117" width="0.0182%" height="15" fill="rgb(244,27,41)" fg:x="6246" fg:w="2"/><text x="56.9339%" y="127.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;raptorq::sparse_matrix::SparseBinaryMatrix as raptorq::matrix::BinaryMatrix&gt;::get_sub_row_as_octets (7 samples, 0.06%)</title><rect x="56.6476%" y="165" width="0.0635%" height="15" fill="rgb(235,35,32)" fg:x="6242" fg:w="7"/><text x="56.8976%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.05%)</title><rect x="56.6567%" y="149" width="0.0545%" height="15" fill="rgb(218,68,31)" fg:x="6243" fg:w="6"/><text x="56.9067%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.04%)</title><rect x="56.6748%" y="133" width="0.0363%" height="15" fill="rgb(207,120,37)" fg:x="6245" fg:w="4"/><text x="56.9248%" y="143.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.02%)</title><rect x="56.7111%" y="165" width="0.0182%" height="15" fill="rgb(227,98,0)" fg:x="6249" fg:w="2"/><text x="56.9611%" y="175.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::octets::fused_addassign_mul_scalar_binary (34 samples, 0.31%)</title><rect x="56.7384%" y="165" width="0.3086%" height="15" fill="rgb(207,7,3)" fg:x="6252" fg:w="34"/><text x="56.9884%" y="175.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::pi_solver::FirstPhaseRowSelectionStats::first_phase_graph_substep (12 samples, 0.11%)</title><rect x="57.0469%" y="165" width="0.1089%" height="15" fill="rgb(206,98,19)" fg:x="6286" fg:w="12"/><text x="57.2969%" y="175.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::graph::ConnectedComponentGraph::get_node_in_largest_connected_component (12 samples, 0.11%)</title><rect x="57.0469%" y="149" width="0.1089%" height="15" fill="rgb(217,5,26)" fg:x="6286" fg:w="12"/><text x="57.2969%" y="159.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::pi_solver::FirstPhaseRowSelectionStats::first_phase_original_degree_substep (9 samples, 0.08%)</title><rect x="57.1558%" y="165" width="0.0817%" height="15" fill="rgb(235,190,38)" fg:x="6298" fg:w="9"/><text x="57.4058%" y="175.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;raptorq::sparse_matrix::SparseBinaryMatrix as raptorq::matrix::BinaryMatrix&gt;::count_ones (2 samples, 0.02%)</title><rect x="57.2375%" y="149" width="0.0182%" height="15" fill="rgb(247,86,24)" fg:x="6307" fg:w="2"/><text x="57.4875%" y="159.50"></text></g><g><title>monad_gossip-955ed6b31611c195`core::slice::sort::insertion_sort_shift_left (2 samples, 0.02%)</title><rect x="57.3646%" y="53" width="0.0182%" height="15" fill="rgb(205,101,16)" fg:x="6321" fg:w="2"/><text x="57.6146%" y="63.50"></text></g><g><title>monad_gossip-955ed6b31611c195`core::slice::sort::insertion_sort_shift_left (2 samples, 0.02%)</title><rect x="57.3827%" y="37" width="0.0182%" height="15" fill="rgb(246,168,33)" fg:x="6323" fg:w="2"/><text x="57.6327%" y="47.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::pi_solver::FirstPhaseRowSelectionStats::new (19 samples, 0.17%)</title><rect x="57.2375%" y="165" width="0.1724%" height="15" fill="rgb(231,114,1)" fg:x="6307" fg:w="19"/><text x="57.4875%" y="175.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::pi_solver::FirstPhaseRowSelectionStats::rebuild_connected_components (16 samples, 0.15%)</title><rect x="57.2647%" y="149" width="0.1452%" height="15" fill="rgb(207,184,53)" fg:x="6310" fg:w="16"/><text x="57.5147%" y="159.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::pi_solver::FirstPhaseRowSelectionStats::first_phase_graph_substep_build_adjacency (10 samples, 0.09%)</title><rect x="57.3192%" y="133" width="0.0908%" height="15" fill="rgb(224,95,51)" fg:x="6316" fg:w="10"/><text x="57.5692%" y="143.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::arraymap::UndirectedGraph::build (9 samples, 0.08%)</title><rect x="57.3283%" y="117" width="0.0817%" height="15" fill="rgb(212,188,45)" fg:x="6317" fg:w="9"/><text x="57.5783%" y="127.50"></text></g><g><title>monad_gossip-955ed6b31611c195`core::slice::sort::recurse (7 samples, 0.06%)</title><rect x="57.3464%" y="101" width="0.0635%" height="15" fill="rgb(223,154,38)" fg:x="6319" fg:w="7"/><text x="57.5964%" y="111.50"></text></g><g><title>monad_gossip-955ed6b31611c195`core::slice::sort::recurse (6 samples, 0.05%)</title><rect x="57.3555%" y="85" width="0.0545%" height="15" fill="rgb(251,22,52)" fg:x="6320" fg:w="6"/><text x="57.6055%" y="95.50"></text></g><g><title>monad_gossip-955ed6b31611c195`core::slice::sort::recurse (5 samples, 0.05%)</title><rect x="57.3646%" y="69" width="0.0454%" height="15" fill="rgb(229,209,22)" fg:x="6321" fg:w="5"/><text x="57.6146%" y="79.50"></text></g><g><title>monad_gossip-955ed6b31611c195`core::slice::sort::recurse (3 samples, 0.03%)</title><rect x="57.3827%" y="53" width="0.0272%" height="15" fill="rgb(234,138,34)" fg:x="6323" fg:w="3"/><text x="57.6327%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.04%)</title><rect x="57.5914%" y="149" width="0.0363%" height="15" fill="rgb(212,95,11)" fg:x="6346" fg:w="4"/><text x="57.8414%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.02%)</title><rect x="57.6096%" y="133" width="0.0182%" height="15" fill="rgb(240,179,47)" fg:x="6348" fg:w="2"/><text x="57.8596%" y="143.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;raptorq::iterators::OctetIter as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.05%)</title><rect x="57.6459%" y="149" width="0.0545%" height="15" fill="rgb(240,163,11)" fg:x="6352" fg:w="6"/><text x="57.8959%" y="159.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;raptorq::sparse_matrix::SparseBinaryMatrix as raptorq::matrix::BinaryMatrix&gt;::get (2 samples, 0.02%)</title><rect x="57.7003%" y="149" width="0.0182%" height="15" fill="rgb(236,37,12)" fg:x="6358" fg:w="2"/><text x="57.9503%" y="159.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.03%)</title><rect x="57.7185%" y="149" width="0.0272%" height="15" fill="rgb(232,164,16)" fg:x="6360" fg:w="3"/><text x="57.9685%" y="159.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="57.7276%" y="133" width="0.0182%" height="15" fill="rgb(244,205,15)" fg:x="6361" fg:w="2"/><text x="57.9776%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="57.7276%" y="117" width="0.0182%" height="15" fill="rgb(223,117,47)" fg:x="6361" fg:w="2"/><text x="57.9776%" y="127.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::arraymap::U32VecMap::increment (3 samples, 0.03%)</title><rect x="57.7548%" y="149" width="0.0272%" height="15" fill="rgb(244,107,35)" fg:x="6364" fg:w="3"/><text x="58.0048%" y="159.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::pi_solver::FirstPhaseRowSelectionStats::resize (44 samples, 0.40%)</title><rect x="57.4099%" y="165" width="0.3993%" height="15" fill="rgb(205,140,8)" fg:x="6326" fg:w="44"/><text x="57.6599%" y="175.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::graph::ConnectedComponentGraph::add_edge (3 samples, 0.03%)</title><rect x="57.7820%" y="149" width="0.0272%" height="15" fill="rgb(228,84,46)" fg:x="6367" fg:w="3"/><text x="58.0320%" y="159.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;raptorq::iterators::OctetIter as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.08%)</title><rect x="57.8092%" y="149" width="0.0817%" height="15" fill="rgb(254,188,9)" fg:x="6370" fg:w="9"/><text x="58.0592%" y="159.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::pi_solver::IntermediateSymbolDecoder&lt;T&gt;::first_phase_swap_columns_substep (11 samples, 0.10%)</title><rect x="57.8092%" y="165" width="0.0998%" height="15" fill="rgb(206,112,54)" fg:x="6370" fg:w="11"/><text x="58.0592%" y="175.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::pi_solver::IntermediateSymbolDecoder&lt;T&gt;::swap_columns (2 samples, 0.02%)</title><rect x="57.8909%" y="149" width="0.0182%" height="15" fill="rgb(216,84,49)" fg:x="6379" fg:w="2"/><text x="58.1409%" y="159.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::pi_solver::IntermediateSymbolDecoder&lt;T&gt;::first_phase (257 samples, 2.33%)</title><rect x="55.5858%" y="181" width="2.3323%" height="15" fill="rgb(214,194,35)" fg:x="6125" fg:w="257"/><text x="55.8358%" y="191.50">m..</text></g><g><title>monad_gossip-955ed6b31611c195`&lt;raptorq::sparse_matrix::SparseBinaryMatrix as raptorq::matrix::BinaryMatrix&gt;::query_non_zero_columns (9 samples, 0.08%)</title><rect x="57.9726%" y="165" width="0.0817%" height="15" fill="rgb(249,28,3)" fg:x="6388" fg:w="9"/><text x="58.2226%" y="175.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.03%)</title><rect x="58.0270%" y="149" width="0.0272%" height="15" fill="rgb(222,56,52)" fg:x="6394" fg:w="3"/><text x="58.2770%" y="159.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="58.0361%" y="133" width="0.0182%" height="15" fill="rgb(245,217,50)" fg:x="6395" fg:w="2"/><text x="58.2861%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="58.0361%" y="117" width="0.0182%" height="15" fill="rgb(213,201,24)" fg:x="6395" fg:w="2"/><text x="58.2861%" y="127.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::pi_solver::IntermediateSymbolDecoder&lt;T&gt;::fourth_phase (16 samples, 0.15%)</title><rect x="57.9272%" y="181" width="0.1452%" height="15" fill="rgb(248,116,28)" fg:x="6383" fg:w="16"/><text x="58.1772%" y="191.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.02%)</title><rect x="58.0543%" y="165" width="0.0182%" height="15" fill="rgb(219,72,43)" fg:x="6397" fg:w="2"/><text x="58.3043%" y="175.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;raptorq::sparse_matrix::SparseBinaryMatrix as raptorq::matrix::BinaryMatrix&gt;::resize (3 samples, 0.03%)</title><rect x="58.0724%" y="165" width="0.0272%" height="15" fill="rgb(209,138,14)" fg:x="6399" fg:w="3"/><text x="58.3224%" y="175.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::pi_solver::IntermediateSymbolDecoder&lt;T&gt;::backwards_elimination (7 samples, 0.06%)</title><rect x="58.0996%" y="165" width="0.0635%" height="15" fill="rgb(222,18,33)" fg:x="6402" fg:w="7"/><text x="58.3496%" y="175.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;raptorq::sparse_matrix::SparseBinaryMatrix as raptorq::matrix::BinaryMatrix&gt;::set (2 samples, 0.02%)</title><rect x="58.1450%" y="149" width="0.0182%" height="15" fill="rgb(213,199,7)" fg:x="6407" fg:w="2"/><text x="58.3950%" y="159.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::pi_solver::IntermediateSymbolDecoder&lt;T&gt;::second_phase (18 samples, 0.16%)</title><rect x="58.0724%" y="181" width="0.1634%" height="15" fill="rgb(250,110,10)" fg:x="6399" fg:w="18"/><text x="58.3224%" y="191.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::pi_solver::IntermediateSymbolDecoder&lt;T&gt;::record_reduce_to_row_echelon (8 samples, 0.07%)</title><rect x="58.1632%" y="165" width="0.0726%" height="15" fill="rgb(248,123,6)" fg:x="6409" fg:w="8"/><text x="58.4132%" y="175.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::pi_solver::IntermediateSymbolDecoder&lt;T&gt;::third_phase (12 samples, 0.11%)</title><rect x="58.2358%" y="181" width="0.1089%" height="15" fill="rgb(206,91,31)" fg:x="6417" fg:w="12"/><text x="58.4858%" y="191.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;raptorq::sparse_matrix::SparseBinaryMatrix as raptorq::matrix::BinaryMatrix&gt;::add_assign_rows (6 samples, 0.05%)</title><rect x="58.2902%" y="165" width="0.0545%" height="15" fill="rgb(211,154,13)" fg:x="6423" fg:w="6"/><text x="58.5402%" y="175.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;monad_gossip::seeder::raptor::Raptor&lt;ST&gt; as monad_gossip::seeder::chunker::Chunker&gt;::process_chunk (2,373 samples, 21.54%)</title><rect x="36.8273%" y="261" width="21.5355%" height="15" fill="rgb(225,148,7)" fg:x="4058" fg:w="2373"/><text x="37.0773%" y="271.50">monad_gossip-955ed6b31611c195`&lt;mon..</text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::decoder::Decoder::decode (1,293 samples, 11.73%)</title><rect x="46.6286%" y="245" width="11.7343%" height="15" fill="rgb(220,160,43)" fg:x="5138" fg:w="1293"/><text x="46.8786%" y="255.50">monad_gossip-955e..</text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::decoder::SourceBlockDecoder::decode (1,215 samples, 11.03%)</title><rect x="47.3364%" y="229" width="11.0264%" height="15" fill="rgb(213,52,39)" fg:x="5216" fg:w="1215"/><text x="47.5864%" y="239.50">monad_gossip-955..</text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::pi_solver::fused_inverse_mul_symbols (826 samples, 7.50%)</title><rect x="50.8667%" y="213" width="7.4961%" height="15" fill="rgb(243,137,7)" fg:x="5605" fg:w="826"/><text x="51.1167%" y="223.50">monad_goss..</text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::pi_solver::IntermediateSymbolDecoder&lt;T&gt;::execute (740 samples, 6.72%)</title><rect x="51.6472%" y="197" width="6.7157%" height="15" fill="rgb(230,79,13)" fg:x="5691" fg:w="740"/><text x="51.8972%" y="207.50">monad_gos..</text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::util::get_both_indices (2 samples, 0.02%)</title><rect x="58.3447%" y="181" width="0.0182%" height="15" fill="rgb(247,105,23)" fg:x="6429" fg:w="2"/><text x="58.5947%" y="191.50"></text></g><g><title>monad_gossip-955ed6b31611c195`bytes::bytes::promotable_even_clone (3 samples, 0.03%)</title><rect x="58.3810%" y="261" width="0.0272%" height="15" fill="rgb(223,179,41)" fg:x="6433" fg:w="3"/><text x="58.6310%" y="271.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;monad_gossip::seeder::Seeder&lt;C&gt; as monad_gossip::Gossip&gt;::handle_gossip_message (2,501 samples, 22.70%)</title><rect x="35.7836%" y="277" width="22.6972%" height="15" fill="rgb(218,9,34)" fg:x="3943" fg:w="2501"/><text x="36.0336%" y="287.50">monad_gossip-955ed6b31611c195`&lt;monad..</text></g><g><title>monad_gossip-955ed6b31611c195`monad_gossip::seeder::raptor::RaptorMeta&lt;ST&gt;::compute_id (8 samples, 0.07%)</title><rect x="58.4082%" y="261" width="0.0726%" height="15" fill="rgb(222,106,8)" fg:x="6436" fg:w="8"/><text x="58.6582%" y="271.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;monad_crypto::hasher::Blake3Hash as monad_crypto::hasher::Hasher&gt;::hash (7 samples, 0.06%)</title><rect x="58.4173%" y="245" width="0.0635%" height="15" fill="rgb(211,220,0)" fg:x="6437" fg:w="7"/><text x="58.6673%" y="255.50"></text></g><g><title>monad_gossip-955ed6b31611c195`blake3::portable::compress_in_place (7 samples, 0.06%)</title><rect x="58.4173%" y="229" width="0.0635%" height="15" fill="rgb(229,52,16)" fg:x="6437" fg:w="7"/><text x="58.6673%" y="239.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="58.4808%" y="277" width="0.0182%" height="15" fill="rgb(212,155,18)" fg:x="6444" fg:w="2"/><text x="58.7308%" y="287.50"></text></g><g><title>monad_gossip-955ed6b31611c195`bytes_utils::segmented::SegmentedBuf&lt;B&gt;::push (3 samples, 0.03%)</title><rect x="58.4990%" y="277" width="0.0272%" height="15" fill="rgb(242,21,14)" fg:x="6446" fg:w="3"/><text x="58.7490%" y="287.50"></text></g><g><title>monad_gossip-955ed6b31611c195`monad_gossip::connection_manager::ConnectionManager&lt;G&gt;::handle_unframed_gossip_message (2,551 samples, 23.15%)</title><rect x="35.4025%" y="293" width="23.1509%" height="15" fill="rgb(222,19,48)" fg:x="3901" fg:w="2551"/><text x="35.6525%" y="303.50">monad_gossip-955ed6b31611c195`monad_g..</text></g><g><title>monad_gossip-955ed6b31611c195`core::hash::BuildHasher::hash_one (3 samples, 0.03%)</title><rect x="58.5262%" y="277" width="0.0272%" height="15" fill="rgb(232,45,27)" fg:x="6449" fg:w="3"/><text x="58.7762%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (17 samples, 0.15%)</title><rect x="58.7531%" y="277" width="0.1543%" height="15" fill="rgb(249,103,42)" fg:x="6474" fg:w="17"/><text x="59.0031%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.07%)</title><rect x="58.8347%" y="261" width="0.0726%" height="15" fill="rgb(246,81,33)" fg:x="6483" fg:w="8"/><text x="59.0847%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.06%)</title><rect x="58.8438%" y="245" width="0.0635%" height="15" fill="rgb(252,33,42)" fg:x="6484" fg:w="7"/><text x="59.0938%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.04%)</title><rect x="58.8710%" y="229" width="0.0363%" height="15" fill="rgb(209,212,41)" fg:x="6487" fg:w="4"/><text x="59.1210%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.02%)</title><rect x="58.9073%" y="277" width="0.0182%" height="15" fill="rgb(207,154,6)" fg:x="6491" fg:w="2"/><text x="59.1573%" y="287.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;bytes_utils::segmented::SegmentedBuf&lt;B&gt; as core::convert::From&lt;alloc::collections::vec_deque::VecDeque&lt;B&gt;&gt;&gt;::from (11 samples, 0.10%)</title><rect x="58.9255%" y="277" width="0.0998%" height="15" fill="rgb(223,64,47)" fg:x="6493" fg:w="11"/><text x="59.1755%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.02%)</title><rect x="59.1251%" y="261" width="0.0182%" height="15" fill="rgb(211,161,38)" fg:x="6515" fg:w="2"/><text x="59.3751%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.04%)</title><rect x="59.1433%" y="261" width="0.0363%" height="15" fill="rgb(219,138,40)" fg:x="6517" fg:w="4"/><text x="59.3933%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.03%)</title><rect x="59.1887%" y="261" width="0.0272%" height="15" fill="rgb(241,228,46)" fg:x="6522" fg:w="3"/><text x="59.4387%" y="271.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.03%)</title><rect x="59.2159%" y="261" width="0.0272%" height="15" fill="rgb(223,209,38)" fg:x="6525" fg:w="3"/><text x="59.4659%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="59.9873%" y="245" width="0.0182%" height="15" fill="rgb(236,164,45)" fg:x="6610" fg:w="2"/><text x="60.2373%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.02%)</title><rect x="60.1325%" y="229" width="0.0182%" height="15" fill="rgb(231,15,5)" fg:x="6626" fg:w="2"/><text x="60.3825%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_size (2 samples, 0.02%)</title><rect x="60.1506%" y="229" width="0.0182%" height="15" fill="rgb(252,35,15)" fg:x="6628" fg:w="2"/><text x="60.4006%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (24 samples, 0.22%)</title><rect x="60.0054%" y="245" width="0.2178%" height="15" fill="rgb(248,181,18)" fg:x="6612" fg:w="24"/><text x="60.2554%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (6 samples, 0.05%)</title><rect x="60.1688%" y="229" width="0.0545%" height="15" fill="rgb(233,39,42)" fg:x="6630" fg:w="6"/><text x="60.4188%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (5 samples, 0.05%)</title><rect x="60.1779%" y="213" width="0.0454%" height="15" fill="rgb(238,110,33)" fg:x="6631" fg:w="5"/><text x="60.4279%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_small (2 samples, 0.02%)</title><rect x="60.2323%" y="245" width="0.0182%" height="15" fill="rgb(233,195,10)" fg:x="6637" fg:w="2"/><text x="60.4823%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.02%)</title><rect x="60.3049%" y="229" width="0.0182%" height="15" fill="rgb(254,105,3)" fg:x="6645" fg:w="2"/><text x="60.5549%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.02%)</title><rect x="60.3231%" y="229" width="0.0182%" height="15" fill="rgb(221,225,9)" fg:x="6647" fg:w="2"/><text x="60.5731%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (25 samples, 0.23%)</title><rect x="60.5953%" y="213" width="0.2269%" height="15" fill="rgb(224,227,45)" fg:x="6677" fg:w="25"/><text x="60.8453%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (69 samples, 0.63%)</title><rect x="60.2505%" y="245" width="0.6262%" height="15" fill="rgb(229,198,43)" fg:x="6639" fg:w="69"/><text x="60.5005%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (59 samples, 0.54%)</title><rect x="60.3412%" y="229" width="0.5354%" height="15" fill="rgb(206,209,35)" fg:x="6649" fg:w="59"/><text x="60.5912%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (6 samples, 0.05%)</title><rect x="60.8222%" y="213" width="0.0545%" height="15" fill="rgb(245,195,53)" fg:x="6702" fg:w="6"/><text x="61.0722%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (6 samples, 0.05%)</title><rect x="60.8767%" y="245" width="0.0545%" height="15" fill="rgb(240,92,26)" fg:x="6708" fg:w="6"/><text x="61.1267%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (6 samples, 0.05%)</title><rect x="60.9311%" y="245" width="0.0545%" height="15" fill="rgb(207,40,23)" fg:x="6714" fg:w="6"/><text x="61.1811%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (2 samples, 0.02%)</title><rect x="60.9856%" y="245" width="0.0182%" height="15" fill="rgb(223,111,35)" fg:x="6720" fg:w="2"/><text x="61.2356%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (4 samples, 0.04%)</title><rect x="61.0037%" y="245" width="0.0363%" height="15" fill="rgb(229,147,28)" fg:x="6722" fg:w="4"/><text x="61.2537%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.04%)</title><rect x="61.0491%" y="245" width="0.0363%" height="15" fill="rgb(211,29,28)" fg:x="6727" fg:w="4"/><text x="61.2991%" y="255.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;alloc::collections::btree::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (254 samples, 2.31%)</title><rect x="61.0854%" y="245" width="2.3051%" height="15" fill="rgb(228,72,33)" fg:x="6731" fg:w="254"/><text x="61.3354%" y="255.50">m..</text></g><g><title>monad_gossip-955ed6b31611c195`&lt;alloc::collections::btree::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (48 samples, 0.44%)</title><rect x="63.3905%" y="245" width="0.4356%" height="15" fill="rgb(205,214,31)" fg:x="6985" fg:w="48"/><text x="63.6405%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.06%)</title><rect x="67.9644%" y="197" width="0.0635%" height="15" fill="rgb(224,111,15)" fg:x="7489" fg:w="7"/><text x="68.2144%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (14 samples, 0.13%)</title><rect x="67.9190%" y="213" width="0.1271%" height="15" fill="rgb(253,21,26)" fg:x="7484" fg:w="14"/><text x="68.1690%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.02%)</title><rect x="68.0280%" y="197" width="0.0182%" height="15" fill="rgb(245,139,43)" fg:x="7496" fg:w="2"/><text x="68.2780%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3 samples, 0.03%)</title><rect x="68.1187%" y="197" width="0.0272%" height="15" fill="rgb(252,170,7)" fg:x="7506" fg:w="3"/><text x="68.3687%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (18 samples, 0.16%)</title><rect x="68.3365%" y="181" width="0.1634%" height="15" fill="rgb(231,118,14)" fg:x="7530" fg:w="18"/><text x="68.5865%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (87 samples, 0.79%)</title><rect x="68.0461%" y="213" width="0.7895%" height="15" fill="rgb(238,83,0)" fg:x="7498" fg:w="87"/><text x="68.2961%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (75 samples, 0.68%)</title><rect x="68.1550%" y="197" width="0.6806%" height="15" fill="rgb(221,39,39)" fg:x="7510" fg:w="75"/><text x="68.4050%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (37 samples, 0.34%)</title><rect x="68.4999%" y="181" width="0.3358%" height="15" fill="rgb(222,119,46)" fg:x="7548" fg:w="37"/><text x="68.7499%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (10 samples, 0.09%)</title><rect x="68.7449%" y="165" width="0.0908%" height="15" fill="rgb(222,165,49)" fg:x="7575" fg:w="10"/><text x="68.9949%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (111 samples, 1.01%)</title><rect x="67.8555%" y="229" width="1.0074%" height="15" fill="rgb(219,113,52)" fg:x="7477" fg:w="111"/><text x="68.1055%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.03%)</title><rect x="68.8356%" y="213" width="0.0272%" height="15" fill="rgb(214,7,15)" fg:x="7585" fg:w="3"/><text x="69.0856%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.02%)</title><rect x="68.8629%" y="229" width="0.0182%" height="15" fill="rgb(235,32,4)" fg:x="7588" fg:w="2"/><text x="69.1129%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="68.8810%" y="229" width="0.0182%" height="15" fill="rgb(238,90,54)" fg:x="7590" fg:w="2"/><text x="69.1310%" y="239.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;alloc::collections::btree::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,949 samples, 17.69%)</title><rect x="68.8992%" y="229" width="17.6876%" height="15" fill="rgb(213,208,19)" fg:x="7592" fg:w="1949"/><text x="69.1492%" y="239.50">monad_gossip-955ed6b31611c1..</text></g><g><title>monad_gossip-955ed6b31611c195`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,864 samples, 25.99%)</title><rect x="63.8261%" y="245" width="25.9915%" height="15" fill="rgb(233,156,4)" fg:x="7033" fg:w="2864"/><text x="64.0761%" y="255.50">monad_gossip-955ed6b31611c195`&lt;alloc::vec:..</text></g><g><title>monad_gossip-955ed6b31611c195`&lt;alloc::collections::btree::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (356 samples, 3.23%)</title><rect x="86.5868%" y="229" width="3.2308%" height="15" fill="rgb(207,194,5)" fg:x="9541" fg:w="356"/><text x="86.8368%" y="239.50">mon..</text></g><g><title>monad_gossip-955ed6b31611c195`&lt;monad_crypto::hasher::Blake3Hash as monad_crypto::hasher::Hasher&gt;::hash (3 samples, 0.03%)</title><rect x="89.8176%" y="245" width="0.0272%" height="15" fill="rgb(206,111,30)" fg:x="9897" fg:w="3"/><text x="90.0676%" y="255.50"></text></g><g><title>monad_gossip-955ed6b31611c195`blake3::portable::compress_in_place (2 samples, 0.02%)</title><rect x="89.8267%" y="229" width="0.0182%" height="15" fill="rgb(243,70,54)" fg:x="9898" fg:w="2"/><text x="90.0767%" y="239.50"></text></g><g><title>monad_gossip-955ed6b31611c195`__rdl_alloc (3 samples, 0.03%)</title><rect x="89.8448%" y="245" width="0.0272%" height="15" fill="rgb(242,28,8)" fg:x="9900" fg:w="3"/><text x="90.0948%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.03%)</title><rect x="89.8993%" y="229" width="0.0272%" height="15" fill="rgb(219,106,18)" fg:x="9906" fg:w="3"/><text x="90.1493%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.03%)</title><rect x="89.8993%" y="213" width="0.0272%" height="15" fill="rgb(244,222,10)" fg:x="9906" fg:w="3"/><text x="90.1493%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3 samples, 0.03%)</title><rect x="89.8993%" y="197" width="0.0272%" height="15" fill="rgb(236,179,52)" fg:x="9906" fg:w="3"/><text x="90.1493%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (21 samples, 0.19%)</title><rect x="89.9537%" y="213" width="0.1906%" height="15" fill="rgb(213,23,39)" fg:x="9912" fg:w="21"/><text x="90.2037%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.02%)</title><rect x="90.1624%" y="197" width="0.0182%" height="15" fill="rgb(238,48,10)" fg:x="9935" fg:w="2"/><text x="90.4124%" y="207.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::collections::btree::map::entry::OccupiedEntry&lt;K,V,A&gt;::remove_kv (38 samples, 0.34%)</title><rect x="89.8720%" y="245" width="0.3449%" height="15" fill="rgb(251,196,23)" fg:x="9903" fg:w="38"/><text x="90.1220%" y="255.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_kv_tracking (31 samples, 0.28%)</title><rect x="89.9356%" y="229" width="0.2813%" height="15" fill="rgb(250,152,24)" fg:x="9910" fg:w="31"/><text x="90.1856%" y="239.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (7 samples, 0.06%)</title><rect x="90.1534%" y="213" width="0.0635%" height="15" fill="rgb(209,150,17)" fg:x="9934" fg:w="7"/><text x="90.4034%" y="223.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (4 samples, 0.04%)</title><rect x="90.1806%" y="197" width="0.0363%" height="15" fill="rgb(234,202,34)" fg:x="9937" fg:w="4"/><text x="90.4306%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 0.04%)</title><rect x="90.1806%" y="181" width="0.0363%" height="15" fill="rgb(253,148,53)" fg:x="9937" fg:w="4"/><text x="90.4306%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4 samples, 0.04%)</title><rect x="90.1806%" y="165" width="0.0363%" height="15" fill="rgb(218,129,16)" fg:x="9937" fg:w="4"/><text x="90.4306%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.02%)</title><rect x="90.1987%" y="149" width="0.0182%" height="15" fill="rgb(216,85,19)" fg:x="9939" fg:w="2"/><text x="90.4487%" y="159.50"></text></g><g><title>monad_gossip-955ed6b31611c195`blake3::Hasher::update (32 samples, 0.29%)</title><rect x="90.2260%" y="245" width="0.2904%" height="15" fill="rgb(235,228,7)" fg:x="9942" fg:w="32"/><text x="90.4760%" y="255.50"></text></g><g><title>monad_gossip-955ed6b31611c195`blake3::portable::compress_in_place (31 samples, 0.28%)</title><rect x="90.2350%" y="229" width="0.2813%" height="15" fill="rgb(245,175,0)" fg:x="9943" fg:w="31"/><text x="90.4850%" y="239.50"></text></g><g><title>monad_gossip-955ed6b31611c195`blake3::portable::compress_in_place (7 samples, 0.06%)</title><rect x="90.5164%" y="245" width="0.0635%" height="15" fill="rgb(208,168,36)" fg:x="9974" fg:w="7"/><text x="90.7664%" y="255.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;monad_crypto::hasher::Blake3Hash as monad_crypto::hasher::Hasher&gt;::hash (2 samples, 0.02%)</title><rect x="90.5799%" y="229" width="0.0182%" height="15" fill="rgb(246,171,24)" fg:x="9981" fg:w="2"/><text x="90.8299%" y="239.50"></text></g><g><title>monad_gossip-955ed6b31611c195`monad_gossip::seeder::raptor::RaptorMeta&lt;ST&gt;::compute_id (4 samples, 0.04%)</title><rect x="90.5799%" y="245" width="0.0363%" height="15" fill="rgb(215,142,24)" fg:x="9981" fg:w="4"/><text x="90.8299%" y="255.50"></text></g><g><title>monad_gossip-955ed6b31611c195`blake3::Hasher::update (2 samples, 0.02%)</title><rect x="90.5981%" y="229" width="0.0182%" height="15" fill="rgb(250,187,7)" fg:x="9983" fg:w="2"/><text x="90.8481%" y="239.50"></text></g><g><title>monad_gossip-955ed6b31611c195`rand::rng::Rng::gen_range (16 samples, 0.15%)</title><rect x="90.6162%" y="245" width="0.1452%" height="15" fill="rgb(228,66,33)" fg:x="9985" fg:w="16"/><text x="90.8662%" y="255.50"></text></g><g><title>monad_gossip-955ed6b31611c195`rand_core::block::BlockRng&lt;R&gt;::generate_and_set (10 samples, 0.09%)</title><rect x="90.7614%" y="245" width="0.0908%" height="15" fill="rgb(234,215,21)" fg:x="10001" fg:w="10"/><text x="91.0114%" y="255.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::base::EncodingPacket::serialize (5 samples, 0.05%)</title><rect x="90.8522%" y="245" width="0.0454%" height="15" fill="rgb(222,191,20)" fg:x="10011" fg:w="5"/><text x="91.1022%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.04%)</title><rect x="90.8612%" y="229" width="0.0363%" height="15" fill="rgb(245,79,54)" fg:x="10012" fg:w="4"/><text x="91.1112%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.03%)</title><rect x="90.8703%" y="213" width="0.0272%" height="15" fill="rgb(240,10,37)" fg:x="10013" fg:w="3"/><text x="91.1203%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3 samples, 0.03%)</title><rect x="90.8703%" y="197" width="0.0272%" height="15" fill="rgb(214,192,32)" fg:x="10013" fg:w="3"/><text x="91.1203%" y="207.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;monad_gossip::seeder::raptor::Raptor&lt;ST&gt; as monad_gossip::seeder::chunker::Chunker&gt;::generate_chunk (3,512 samples, 31.87%)</title><rect x="59.2522%" y="261" width="31.8722%" height="15" fill="rgb(209,36,54)" fg:x="6529" fg:w="3512"/><text x="59.5022%" y="271.50">monad_gossip-955ed6b31611c195`&lt;monad_gossip::seeder:..</text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::encoder::SourceBlockEncoder::repair_packets (25 samples, 0.23%)</title><rect x="90.8975%" y="245" width="0.2269%" height="15" fill="rgb(220,10,11)" fg:x="10016" fg:w="25"/><text x="91.1475%" y="255.50"></text></g><g><title>monad_gossip-955ed6b31611c195`raptorq::systematic_constants::num_intermediate_symbols (3 samples, 0.03%)</title><rect x="91.0972%" y="229" width="0.0272%" height="15" fill="rgb(221,106,17)" fg:x="10038" fg:w="3"/><text x="91.3472%" y="239.50"></text></g><g><title>monad_gossip-955ed6b31611c195`DYLD-STUB$$free (2 samples, 0.02%)</title><rect x="91.1244%" y="261" width="0.0182%" height="15" fill="rgb(251,142,44)" fg:x="10041" fg:w="2"/><text x="91.3744%" y="271.50"></text></g><g><title>monad_gossip-955ed6b31611c195`bytes::bytes::promotable_even_clone (3 samples, 0.03%)</title><rect x="91.1516%" y="261" width="0.0272%" height="15" fill="rgb(238,13,15)" fg:x="10044" fg:w="3"/><text x="91.4016%" y="271.50"></text></g><g><title>monad_gossip-955ed6b31611c195`bytes::bytes_mut::_&lt;impl core::convert::From&lt;bytes::bytes_mut::BytesMut&gt; for bytes::bytes::Bytes&gt;::from (2 samples, 0.02%)</title><rect x="91.1789%" y="261" width="0.0182%" height="15" fill="rgb(208,107,27)" fg:x="10047" fg:w="2"/><text x="91.4289%" y="271.50"></text></g><g><title>monad_gossip-955ed6b31611c195`core::hash::BuildHasher::hash_one (4 samples, 0.04%)</title><rect x="91.1970%" y="261" width="0.0363%" height="15" fill="rgb(205,136,37)" fg:x="10049" fg:w="4"/><text x="91.4470%" y="271.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (32 samples, 0.29%)</title><rect x="91.2878%" y="245" width="0.2904%" height="15" fill="rgb(250,205,27)" fg:x="10059" fg:w="32"/><text x="91.5378%" y="255.50"></text></g><g><title>monad_gossip-955ed6b31611c195`core::hash::BuildHasher::hash_one (4 samples, 0.04%)</title><rect x="91.5782%" y="245" width="0.0363%" height="15" fill="rgb(210,80,43)" fg:x="10091" fg:w="4"/><text x="91.8282%" y="255.50"></text></g><g><title>monad_gossip-955ed6b31611c195`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (44 samples, 0.40%)</title><rect x="91.2333%" y="261" width="0.3993%" height="15" fill="rgb(247,160,36)" fg:x="10053" fg:w="44"/><text x="91.4833%" y="271.50"></text></g><g><title>monad_gossip-955ed6b31611c195`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.02%)</title><rect x="91.6145%" y="245" width="0.0182%" height="15" fill="rgb(234,13,49)" fg:x="10095" fg:w="2"/><text x="91.8645%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.03%)</title><rect x="91.7325%" y="245" width="0.0272%" height="15" fill="rgb(234,122,0)" fg:x="10108" fg:w="3"/><text x="91.9825%" y="255.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.02%)</title><rect x="91.7688%" y="245" width="0.0182%" height="15" fill="rgb(207,146,38)" fg:x="10112" fg:w="2"/><text x="92.0188%" y="255.50"></text></g><g><title>monad_gossip-955ed6b31611c195`DYLD-STUB$$malloc (2 samples, 0.02%)</title><rect x="91.8777%" y="197" width="0.0182%" height="15" fill="rgb(207,177,25)" fg:x="10124" fg:w="2"/><text x="92.1277%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.07%)</title><rect x="91.9866%" y="149" width="0.0726%" height="15" fill="rgb(211,178,42)" fg:x="10136" fg:w="8"/><text x="92.2366%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.03%)</title><rect x="92.0319%" y="133" width="0.0272%" height="15" fill="rgb(230,69,54)" fg:x="10141" fg:w="3"/><text x="92.2819%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (17 samples, 0.15%)</title><rect x="91.9140%" y="181" width="0.1543%" height="15" fill="rgb(214,135,41)" fg:x="10128" fg:w="17"/><text x="92.1640%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.12%)</title><rect x="91.9503%" y="165" width="0.1180%" height="15" fill="rgb(237,67,25)" fg:x="10132" fg:w="13"/><text x="92.2003%" y="175.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put (31 samples, 0.28%)</title><rect x="91.7960%" y="245" width="0.2813%" height="15" fill="rgb(222,189,50)" fg:x="10115" fg:w="31"/><text x="92.0460%" y="255.50"></text></g><g><title>monad_gossip-955ed6b31611c195`bytes::bytes_mut::BytesMut::reserve_inner (27 samples, 0.25%)</title><rect x="91.8323%" y="229" width="0.2450%" height="15" fill="rgb(245,148,34)" fg:x="10119" fg:w="27"/><text x="92.0823%" y="239.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (24 samples, 0.22%)</title><rect x="91.8595%" y="213" width="0.2178%" height="15" fill="rgb(222,29,6)" fg:x="10122" fg:w="24"/><text x="92.1095%" y="223.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::raw_vec::finish_grow (20 samples, 0.18%)</title><rect x="91.8958%" y="197" width="0.1815%" height="15" fill="rgb(221,189,43)" fg:x="10126" fg:w="20"/><text x="92.1458%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="92.1771%" y="229" width="0.0182%" height="15" fill="rgb(207,36,27)" fg:x="10157" fg:w="2"/><text x="92.4271%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.04%)</title><rect x="92.4040%" y="181" width="0.0363%" height="15" fill="rgb(217,90,24)" fg:x="10182" fg:w="4"/><text x="92.6540%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.02%)</title><rect x="92.4222%" y="165" width="0.0182%" height="15" fill="rgb(224,66,35)" fg:x="10184" fg:w="2"/><text x="92.6722%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.07%)</title><rect x="92.3768%" y="213" width="0.0726%" height="15" fill="rgb(221,13,50)" fg:x="10179" fg:w="8"/><text x="92.6268%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.05%)</title><rect x="92.3950%" y="197" width="0.0545%" height="15" fill="rgb(236,68,49)" fg:x="10181" fg:w="6"/><text x="92.6450%" y="207.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (37 samples, 0.34%)</title><rect x="92.1953%" y="229" width="0.3358%" height="15" fill="rgb(229,146,28)" fg:x="10159" fg:w="37"/><text x="92.4453%" y="239.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.08%)</title><rect x="92.4494%" y="213" width="0.0817%" height="15" fill="rgb(225,31,38)" fg:x="10187" fg:w="9"/><text x="92.6994%" y="223.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.02%)</title><rect x="92.5311%" y="229" width="0.0182%" height="15" fill="rgb(250,208,3)" fg:x="10196" fg:w="2"/><text x="92.7811%" y="239.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;bytes_utils::segmented::SegmentedBuf&lt;B&gt; as core::iter::traits::collect::FromIterator&lt;B&gt;&gt;::from_iter (53 samples, 0.48%)</title><rect x="92.0773%" y="245" width="0.4810%" height="15" fill="rgb(246,54,23)" fg:x="10146" fg:w="53"/><text x="92.3273%" y="255.50"></text></g><g><title>monad_gossip-955ed6b31611c195`bytes::bytes_mut::BytesMut::reserve_inner (2 samples, 0.02%)</title><rect x="92.5674%" y="245" width="0.0182%" height="15" fill="rgb(243,76,11)" fg:x="10200" fg:w="2"/><text x="92.8174%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="92.6763%" y="197" width="0.0182%" height="15" fill="rgb(245,21,50)" fg:x="10212" fg:w="2"/><text x="92.9263%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.03%)</title><rect x="92.8396%" y="165" width="0.0272%" height="15" fill="rgb(228,9,43)" fg:x="10230" fg:w="3"/><text x="93.0896%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (17 samples, 0.15%)</title><rect x="92.7217%" y="181" width="0.1543%" height="15" fill="rgb(208,100,47)" fg:x="10217" fg:w="17"/><text x="92.9717%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (27 samples, 0.25%)</title><rect x="92.6491%" y="213" width="0.2450%" height="15" fill="rgb(232,26,8)" fg:x="10209" fg:w="27"/><text x="92.8991%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (22 samples, 0.20%)</title><rect x="92.6944%" y="197" width="0.1997%" height="15" fill="rgb(216,166,38)" fg:x="10214" fg:w="22"/><text x="92.9444%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.02%)</title><rect x="92.8759%" y="181" width="0.0182%" height="15" fill="rgb(251,202,51)" fg:x="10234" fg:w="2"/><text x="93.1259%" y="191.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (32 samples, 0.29%)</title><rect x="92.6309%" y="229" width="0.2904%" height="15" fill="rgb(254,216,34)" fg:x="10207" fg:w="32"/><text x="92.8809%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.03%)</title><rect x="92.8941%" y="213" width="0.0272%" height="15" fill="rgb(251,32,27)" fg:x="10236" fg:w="3"/><text x="93.1441%" y="223.50"></text></g><g><title>monad_gossip-955ed6b31611c195`bytes::bytes_mut::_&lt;impl core::convert::From&lt;bytes::bytes_mut::BytesMut&gt; for bytes::bytes::Bytes&gt;::from (39 samples, 0.35%)</title><rect x="92.5855%" y="245" width="0.3539%" height="15" fill="rgb(208,127,28)" fg:x="10202" fg:w="39"/><text x="92.8355%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.02%)</title><rect x="92.9758%" y="229" width="0.0182%" height="15" fill="rgb(224,137,22)" fg:x="10245" fg:w="2"/><text x="93.2258%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (11 samples, 0.10%)</title><rect x="93.0121%" y="229" width="0.0998%" height="15" fill="rgb(254,70,32)" fg:x="10249" fg:w="11"/><text x="93.2621%" y="239.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.02%)</title><rect x="93.2390%" y="213" width="0.0182%" height="15" fill="rgb(229,75,37)" fg:x="10274" fg:w="2"/><text x="93.4890%" y="223.50"></text></g><g><title>monad_gossip-955ed6b31611c195`DYLD-STUB$$realloc (2 samples, 0.02%)</title><rect x="93.2934%" y="181" width="0.0182%" height="15" fill="rgb(252,64,23)" fg:x="10280" fg:w="2"/><text x="93.5434%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (2 samples, 0.02%)</title><rect x="93.3842%" y="149" width="0.0182%" height="15" fill="rgb(232,162,48)" fg:x="10290" fg:w="2"/><text x="93.6342%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.07%)</title><rect x="93.4295%" y="133" width="0.0726%" height="15" fill="rgb(246,160,12)" fg:x="10295" fg:w="8"/><text x="93.6795%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (13 samples, 0.12%)</title><rect x="93.4023%" y="149" width="0.1180%" height="15" fill="rgb(247,166,0)" fg:x="10292" fg:w="13"/><text x="93.6523%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.02%)</title><rect x="93.5021%" y="133" width="0.0182%" height="15" fill="rgb(249,219,21)" fg:x="10303" fg:w="2"/><text x="93.7521%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (26 samples, 0.24%)</title><rect x="93.3479%" y="165" width="0.2360%" height="15" fill="rgb(205,209,3)" fg:x="10286" fg:w="26"/><text x="93.5979%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.06%)</title><rect x="93.5203%" y="149" width="0.0635%" height="15" fill="rgb(243,44,1)" fg:x="10305" fg:w="7"/><text x="93.7703%" y="159.50"></text></g><g><title>monad_gossip-955ed6b31611c195`bytes::bytes_mut::BytesMut::reserve_inner (37 samples, 0.34%)</title><rect x="93.2571%" y="213" width="0.3358%" height="15" fill="rgb(206,159,16)" fg:x="10276" fg:w="37"/><text x="93.5071%" y="223.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (35 samples, 0.32%)</title><rect x="93.2753%" y="197" width="0.3176%" height="15" fill="rgb(244,77,30)" fg:x="10278" fg:w="35"/><text x="93.5253%" y="207.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::raw_vec::finish_grow (30 samples, 0.27%)</title><rect x="93.3206%" y="181" width="0.2723%" height="15" fill="rgb(218,69,12)" fg:x="10283" fg:w="30"/><text x="93.5706%" y="191.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_newtype_variant (54 samples, 0.49%)</title><rect x="93.1119%" y="229" width="0.4901%" height="15" fill="rgb(212,87,7)" fg:x="10260" fg:w="54"/><text x="93.3619%" y="239.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.02%)</title><rect x="93.7290%" y="213" width="0.0182%" height="15" fill="rgb(245,114,25)" fg:x="10328" fg:w="2"/><text x="93.9790%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.05%)</title><rect x="93.9196%" y="133" width="0.0545%" height="15" fill="rgb(210,61,42)" fg:x="10349" fg:w="6"/><text x="94.1696%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (22 samples, 0.20%)</title><rect x="93.8470%" y="165" width="0.1997%" height="15" fill="rgb(211,52,33)" fg:x="10341" fg:w="22"/><text x="94.0970%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (15 samples, 0.14%)</title><rect x="93.9105%" y="149" width="0.1361%" height="15" fill="rgb(234,58,33)" fg:x="10348" fg:w="15"/><text x="94.1605%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.07%)</title><rect x="93.9740%" y="133" width="0.0726%" height="15" fill="rgb(220,115,36)" fg:x="10355" fg:w="8"/><text x="94.2240%" y="143.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (31 samples, 0.28%)</title><rect x="93.7835%" y="197" width="0.2813%" height="15" fill="rgb(243,153,54)" fg:x="10334" fg:w="31"/><text x="94.0335%" y="207.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::raw_vec::finish_grow (24 samples, 0.22%)</title><rect x="93.8470%" y="181" width="0.2178%" height="15" fill="rgb(251,47,18)" fg:x="10341" fg:w="24"/><text x="94.0970%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.02%)</title><rect x="94.0466%" y="165" width="0.0182%" height="15" fill="rgb(242,102,42)" fg:x="10363" fg:w="2"/><text x="94.2966%" y="175.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put (53 samples, 0.48%)</title><rect x="93.6020%" y="229" width="0.4810%" height="15" fill="rgb(234,31,38)" fg:x="10314" fg:w="53"/><text x="93.8520%" y="239.50"></text></g><g><title>monad_gossip-955ed6b31611c195`bytes::bytes_mut::BytesMut::reserve_inner (37 samples, 0.34%)</title><rect x="93.7472%" y="213" width="0.3358%" height="15" fill="rgb(221,117,51)" fg:x="10330" fg:w="37"/><text x="93.9972%" y="223.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="94.0648%" y="197" width="0.0182%" height="15" fill="rgb(212,20,18)" fg:x="10365" fg:w="2"/><text x="94.3148%" y="207.50"></text></g><g><title>monad_gossip-955ed6b31611c195`DYLD-STUB$$memcpy (3 samples, 0.03%)</title><rect x="94.0920%" y="229" width="0.0272%" height="15" fill="rgb(245,133,36)" fg:x="10368" fg:w="3"/><text x="94.3420%" y="239.50"></text></g><g><title>monad_gossip-955ed6b31611c195`bytes::bytes_mut::BytesMut::reserve_inner (3 samples, 0.03%)</title><rect x="94.1192%" y="229" width="0.0272%" height="15" fill="rgb(212,6,19)" fg:x="10371" fg:w="3"/><text x="94.3692%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.02%)</title><rect x="94.2009%" y="213" width="0.0182%" height="15" fill="rgb(218,1,36)" fg:x="10380" fg:w="2"/><text x="94.4509%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (16 samples, 0.15%)</title><rect x="94.2191%" y="213" width="0.1452%" height="15" fill="rgb(246,84,54)" fg:x="10382" fg:w="16"/><text x="94.4691%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.04%)</title><rect x="94.3280%" y="197" width="0.0363%" height="15" fill="rgb(242,110,6)" fg:x="10394" fg:w="4"/><text x="94.5780%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.02%)</title><rect x="94.3643%" y="213" width="0.0182%" height="15" fill="rgb(214,47,5)" fg:x="10398" fg:w="2"/><text x="94.6143%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (5 samples, 0.05%)</title><rect x="94.3824%" y="213" width="0.0454%" height="15" fill="rgb(218,159,25)" fg:x="10400" fg:w="5"/><text x="94.6324%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.02%)</title><rect x="94.4278%" y="213" width="0.0182%" height="15" fill="rgb(215,211,28)" fg:x="10405" fg:w="2"/><text x="94.6778%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (71 samples, 0.64%)</title><rect x="94.4460%" y="213" width="0.6443%" height="15" fill="rgb(238,59,32)" fg:x="10407" fg:w="71"/><text x="94.6960%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (38 samples, 0.34%)</title><rect x="95.2083%" y="197" width="0.3449%" height="15" fill="rgb(226,82,3)" fg:x="10491" fg:w="38"/><text x="95.4583%" y="207.50"></text></g><g><title>monad_gossip-955ed6b31611c195`DYLD-STUB$$memcpy (17 samples, 0.15%)</title><rect x="95.5531%" y="197" width="0.1543%" height="15" fill="rgb(240,164,32)" fg:x="10529" fg:w="17"/><text x="95.8031%" y="207.50"></text></g><g><title>monad_gossip-955ed6b31611c195`bytes::bytes_mut::BytesMut::reserve_inner (9 samples, 0.08%)</title><rect x="95.7074%" y="197" width="0.0817%" height="15" fill="rgb(232,46,7)" fg:x="10546" fg:w="9"/><text x="95.9574%" y="207.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.03%)</title><rect x="96.2429%" y="181" width="0.0272%" height="15" fill="rgb(229,129,53)" fg:x="10605" fg:w="3"/><text x="96.4929%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (4 samples, 0.04%)</title><rect x="96.3155%" y="149" width="0.0363%" height="15" fill="rgb(234,188,29)" fg:x="10613" fg:w="4"/><text x="96.5655%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.04%)</title><rect x="96.3699%" y="133" width="0.0363%" height="15" fill="rgb(246,141,4)" fg:x="10619" fg:w="4"/><text x="96.6199%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="96.4879%" y="101" width="0.0182%" height="15" fill="rgb(229,23,39)" fg:x="10632" fg:w="2"/><text x="96.7379%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.07%)</title><rect x="96.5060%" y="101" width="0.0726%" height="15" fill="rgb(206,12,3)" fg:x="10634" fg:w="8"/><text x="96.7560%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (2 samples, 0.02%)</title><rect x="96.6149%" y="85" width="0.0182%" height="15" fill="rgb(252,226,20)" fg:x="10646" fg:w="2"/><text x="96.8649%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (16 samples, 0.15%)</title><rect x="96.6331%" y="85" width="0.1452%" height="15" fill="rgb(216,123,35)" fg:x="10648" fg:w="16"/><text x="96.8831%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (16 samples, 0.15%)</title><rect x="96.7964%" y="69" width="0.1452%" height="15" fill="rgb(212,68,40)" fg:x="10666" fg:w="16"/><text x="97.0464%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.02%)</title><rect x="96.9235%" y="53" width="0.0182%" height="15" fill="rgb(254,125,32)" fg:x="10680" fg:w="2"/><text x="97.1735%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (19 samples, 0.17%)</title><rect x="96.7783%" y="85" width="0.1724%" height="15" fill="rgb(253,97,22)" fg:x="10664" fg:w="19"/><text x="97.0283%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (52 samples, 0.47%)</title><rect x="96.5786%" y="101" width="0.4719%" height="15" fill="rgb(241,101,14)" fg:x="10642" fg:w="52"/><text x="96.8286%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (11 samples, 0.10%)</title><rect x="96.9507%" y="85" width="0.0998%" height="15" fill="rgb(238,103,29)" fg:x="10683" fg:w="11"/><text x="97.2007%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (68 samples, 0.62%)</title><rect x="96.4607%" y="117" width="0.6171%" height="15" fill="rgb(233,195,47)" fg:x="10629" fg:w="68"/><text x="96.7107%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.03%)</title><rect x="97.0505%" y="101" width="0.0272%" height="15" fill="rgb(246,218,30)" fg:x="10694" fg:w="3"/><text x="97.3005%" y="111.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (94 samples, 0.85%)</title><rect x="96.2973%" y="165" width="0.8531%" height="15" fill="rgb(219,145,47)" fg:x="10611" fg:w="94"/><text x="96.5473%" y="175.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::raw_vec::finish_grow (87 samples, 0.79%)</title><rect x="96.3608%" y="149" width="0.7895%" height="15" fill="rgb(243,12,26)" fg:x="10618" fg:w="87"/><text x="96.6108%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (82 samples, 0.74%)</title><rect x="96.4062%" y="133" width="0.7442%" height="15" fill="rgb(214,87,16)" fg:x="10623" fg:w="82"/><text x="96.6562%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.07%)</title><rect x="97.0778%" y="117" width="0.0726%" height="15" fill="rgb(208,99,42)" fg:x="10697" fg:w="8"/><text x="97.3278%" y="127.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_newtype_struct (228 samples, 2.07%)</title><rect x="95.0903%" y="213" width="2.0692%" height="15" fill="rgb(253,99,2)" fg:x="10478" fg:w="228"/><text x="95.3403%" y="223.50">m..</text></g><g><title>monad_gossip-955ed6b31611c195`std::io::Write::write_all (151 samples, 1.37%)</title><rect x="95.7891%" y="197" width="1.3704%" height="15" fill="rgb(220,168,23)" fg:x="10555" fg:w="151"/><text x="96.0391%" y="207.50"></text></g><g><title>monad_gossip-955ed6b31611c195`bytes::bytes_mut::BytesMut::reserve_inner (98 samples, 0.89%)</title><rect x="96.2701%" y="181" width="0.8894%" height="15" fill="rgb(242,38,24)" fg:x="10608" fg:w="98"/><text x="96.5201%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.08%)</title><rect x="97.2774%" y="165" width="0.0817%" height="15" fill="rgb(225,182,9)" fg:x="10719" fg:w="9"/><text x="97.5274%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.04%)</title><rect x="97.3228%" y="149" width="0.0363%" height="15" fill="rgb(243,178,37)" fg:x="10724" fg:w="4"/><text x="97.5728%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (20 samples, 0.18%)</title><rect x="97.1867%" y="197" width="0.1815%" height="15" fill="rgb(232,139,19)" fg:x="10709" fg:w="20"/><text x="97.4367%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (14 samples, 0.13%)</title><rect x="97.2411%" y="181" width="0.1271%" height="15" fill="rgb(225,201,24)" fg:x="10715" fg:w="14"/><text x="97.4911%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.02%)</title><rect x="97.3682%" y="197" width="0.0182%" height="15" fill="rgb(221,47,46)" fg:x="10729" fg:w="2"/><text x="97.6182%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (12 samples, 0.11%)</title><rect x="97.3863%" y="197" width="0.1089%" height="15" fill="rgb(249,23,13)" fg:x="10731" fg:w="12"/><text x="97.6363%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.05%)</title><rect x="97.4408%" y="181" width="0.0545%" height="15" fill="rgb(219,9,5)" fg:x="10737" fg:w="6"/><text x="97.6908%" y="191.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;monad_crypto::NopSignature as monad_crypto::certificate_signature::CertificateSignature&gt;::serialize (41 samples, 0.37%)</title><rect x="97.1595%" y="213" width="0.3721%" height="15" fill="rgb(254,171,16)" fg:x="10706" fg:w="41"/><text x="97.4095%" y="223.50"></text></g><g><title>monad_gossip-955ed6b31611c195`DYLD-STUB$$memcpy (27 samples, 0.25%)</title><rect x="97.5406%" y="213" width="0.2450%" height="15" fill="rgb(230,171,20)" fg:x="10748" fg:w="27"/><text x="97.7906%" y="223.50"></text></g><g><title>monad_gossip-955ed6b31611c195`core::ptr::drop_in_place&lt;bincode::error::ErrorKind&gt; (2 samples, 0.02%)</title><rect x="97.7947%" y="213" width="0.0182%" height="15" fill="rgb(210,71,41)" fg:x="10776" fg:w="2"/><text x="98.0447%" y="223.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.02%)</title><rect x="98.5207%" y="197" width="0.0182%" height="15" fill="rgb(206,173,20)" fg:x="10856" fg:w="2"/><text x="98.7707%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.02%)</title><rect x="98.5480%" y="165" width="0.0182%" height="15" fill="rgb(233,88,34)" fg:x="10859" fg:w="2"/><text x="98.7980%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (2 samples, 0.02%)</title><rect x="98.6932%" y="117" width="0.0182%" height="15" fill="rgb(223,209,46)" fg:x="10875" fg:w="2"/><text x="98.9432%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="98.7295%" y="101" width="0.0182%" height="15" fill="rgb(250,43,18)" fg:x="10879" fg:w="2"/><text x="98.9795%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (3 samples, 0.03%)</title><rect x="98.7476%" y="101" width="0.0272%" height="15" fill="rgb(208,13,10)" fg:x="10881" fg:w="3"/><text x="98.9976%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.02%)</title><rect x="98.7748%" y="101" width="0.0182%" height="15" fill="rgb(212,200,36)" fg:x="10884" fg:w="2"/><text x="99.0248%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.03%)</title><rect x="98.8474%" y="69" width="0.0272%" height="15" fill="rgb(225,90,30)" fg:x="10892" fg:w="3"/><text x="99.0974%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (12 samples, 0.11%)</title><rect x="98.7930%" y="85" width="0.1089%" height="15" fill="rgb(236,182,39)" fg:x="10886" fg:w="12"/><text x="99.0430%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (3 samples, 0.03%)</title><rect x="98.8747%" y="69" width="0.0272%" height="15" fill="rgb(212,144,35)" fg:x="10895" fg:w="3"/><text x="99.1247%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.12%)</title><rect x="98.7930%" y="101" width="0.1180%" height="15" fill="rgb(228,63,44)" fg:x="10886" fg:w="13"/><text x="99.0430%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (27 samples, 0.25%)</title><rect x="98.7204%" y="117" width="0.2450%" height="15" fill="rgb(228,109,6)" fg:x="10878" fg:w="27"/><text x="98.9704%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.05%)</title><rect x="98.9110%" y="101" width="0.0545%" height="15" fill="rgb(238,117,24)" fg:x="10899" fg:w="6"/><text x="99.1610%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (36 samples, 0.33%)</title><rect x="98.6569%" y="133" width="0.3267%" height="15" fill="rgb(242,26,26)" fg:x="10871" fg:w="36"/><text x="98.9069%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.02%)</title><rect x="98.9654%" y="117" width="0.0182%" height="15" fill="rgb(221,92,48)" fg:x="10905" fg:w="2"/><text x="99.2154%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.04%)</title><rect x="98.9836%" y="133" width="0.0363%" height="15" fill="rgb(209,209,32)" fg:x="10907" fg:w="4"/><text x="99.2336%" y="143.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (57 samples, 0.52%)</title><rect x="98.5389%" y="181" width="0.5173%" height="15" fill="rgb(221,70,22)" fg:x="10858" fg:w="57"/><text x="98.7889%" y="191.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::raw_vec::finish_grow (53 samples, 0.48%)</title><rect x="98.5752%" y="165" width="0.4810%" height="15" fill="rgb(248,145,5)" fg:x="10862" fg:w="53"/><text x="98.8252%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (51 samples, 0.46%)</title><rect x="98.5933%" y="149" width="0.4628%" height="15" fill="rgb(226,116,26)" fg:x="10864" fg:w="51"/><text x="98.8433%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (4 samples, 0.04%)</title><rect x="99.0199%" y="133" width="0.0363%" height="15" fill="rgb(244,5,17)" fg:x="10911" fg:w="4"/><text x="99.2699%" y="143.50"></text></g><g><title>monad_gossip-955ed6b31611c195`serde::ser::Serializer::collect_seq (138 samples, 1.25%)</title><rect x="97.8129%" y="213" width="1.2524%" height="15" fill="rgb(252,159,33)" fg:x="10778" fg:w="138"/><text x="98.0629%" y="223.50"></text></g><g><title>monad_gossip-955ed6b31611c195`bytes::bytes_mut::BytesMut::reserve_inner (58 samples, 0.53%)</title><rect x="98.5389%" y="197" width="0.5264%" height="15" fill="rgb(206,71,0)" fg:x="10858" fg:w="58"/><text x="98.7889%" y="207.50"></text></g><g><title>monad_gossip-955ed6b31611c195`monad_gossip::seeder::raptor::_::_&lt;impl serde::ser::Serialize for monad_gossip::seeder::raptor::RaptorChunk&lt;ST&gt;&gt;::serialize (556 samples, 5.05%)</title><rect x="94.1465%" y="229" width="5.0458%" height="15" fill="rgb(233,118,54)" fg:x="10374" fg:w="556"/><text x="94.3965%" y="239.50">monad_..</text></g><g><title>monad_gossip-955ed6b31611c195`std::io::Write::write_all (14 samples, 0.13%)</title><rect x="99.0653%" y="213" width="0.1271%" height="15" fill="rgb(234,83,48)" fg:x="10916" fg:w="14"/><text x="99.3153%" y="223.50"></text></g><g><title>monad_gossip-955ed6b31611c195`monad_gossip::seeder::Seeder&lt;C&gt;::prepare_message (835 samples, 7.58%)</title><rect x="91.6326%" y="261" width="7.5778%" height="15" fill="rgb(228,3,54)" fg:x="10097" fg:w="835"/><text x="91.8826%" y="271.50">monad_goss..</text></g><g><title>monad_gossip-955ed6b31611c195`monad_gossip::seeder::_::_&lt;impl serde::ser::Serialize for monad_gossip::seeder::Header&lt;M,C&gt;&gt;::serialize (691 samples, 6.27%)</title><rect x="92.9395%" y="245" width="6.2710%" height="15" fill="rgb(226,155,13)" fg:x="10241" fg:w="691"/><text x="93.1895%" y="255.50">monad_go..</text></g><g><title>monad_gossip-955ed6b31611c195`serde::ser::Serializer::collect_seq (2 samples, 0.02%)</title><rect x="99.1923%" y="229" width="0.0182%" height="15" fill="rgb(241,28,37)" fg:x="10930" fg:w="2"/><text x="99.4423%" y="239.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;monad_gossip::seeder::Seeder&lt;C&gt; as monad_gossip::Gossip&gt;::poll (4,430 samples, 40.20%)</title><rect x="59.0253%" y="277" width="40.2033%" height="15" fill="rgb(233,93,10)" fg:x="6504" fg:w="4430"/><text x="59.2753%" y="287.50">monad_gossip-955ed6b31611c195`&lt;monad_gossip::seeder::Seeder&lt;C&gt; as ..</text></g><g><title>monad_gossip-955ed6b31611c195`rand::rng::Rng::gen_range (2 samples, 0.02%)</title><rect x="99.2105%" y="261" width="0.0182%" height="15" fill="rgb(225,113,19)" fg:x="10932" fg:w="2"/><text x="99.4605%" y="271.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;monad_gossip::seeder::raptor::Raptor&lt;ST&gt; as monad_gossip::seeder::chunker::Chunker&gt;::generate_chunk (2 samples, 0.02%)</title><rect x="99.2286%" y="277" width="0.0182%" height="15" fill="rgb(241,2,18)" fg:x="10934" fg:w="2"/><text x="99.4786%" y="287.50"></text></g><g><title>monad_gossip-955ed6b31611c195`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (10 samples, 0.09%)</title><rect x="99.2468%" y="277" width="0.0908%" height="15" fill="rgb(228,207,21)" fg:x="10936" fg:w="10"/><text x="99.4968%" y="287.50"></text></g><g><title>monad_gossip-955ed6b31611c195`__rdl_realloc (2 samples, 0.02%)</title><rect x="99.3557%" y="245" width="0.0182%" height="15" fill="rgb(213,211,35)" fg:x="10948" fg:w="2"/><text x="99.6057%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (4 samples, 0.04%)</title><rect x="99.4555%" y="197" width="0.0363%" height="15" fill="rgb(209,83,10)" fg:x="10959" fg:w="4"/><text x="99.7055%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="99.4918%" y="197" width="0.0182%" height="15" fill="rgb(209,164,1)" fg:x="10963" fg:w="2"/><text x="99.7418%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.05%)</title><rect x="99.5099%" y="197" width="0.0545%" height="15" fill="rgb(213,184,43)" fg:x="10965" fg:w="6"/><text x="99.7599%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.07%)</title><rect x="99.6188%" y="181" width="0.0726%" height="15" fill="rgb(231,61,34)" fg:x="10977" fg:w="8"/><text x="99.8688%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (5 samples, 0.05%)</title><rect x="99.6461%" y="165" width="0.0454%" height="15" fill="rgb(235,75,3)" fg:x="10980" fg:w="5"/><text x="99.8961%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.05%)</title><rect x="99.6461%" y="149" width="0.0454%" height="15" fill="rgb(220,106,47)" fg:x="10980" fg:w="5"/><text x="99.8961%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (18 samples, 0.16%)</title><rect x="99.7005%" y="165" width="0.1634%" height="15" fill="rgb(210,196,33)" fg:x="10986" fg:w="18"/><text x="99.9505%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.02%)</title><rect x="99.8457%" y="149" width="0.0182%" height="15" fill="rgb(229,154,42)" fg:x="11002" fg:w="2"/><text x="100.0957%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (20 samples, 0.18%)</title><rect x="99.6914%" y="181" width="0.1815%" height="15" fill="rgb(228,114,26)" fg:x="10985" fg:w="20"/><text x="99.9414%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (37 samples, 0.34%)</title><rect x="99.5644%" y="197" width="0.3358%" height="15" fill="rgb(208,144,1)" fg:x="10971" fg:w="37"/><text x="99.8144%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.03%)</title><rect x="99.8729%" y="181" width="0.0272%" height="15" fill="rgb(239,112,37)" fg:x="11005" fg:w="3"/><text x="100.1229%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (52 samples, 0.47%)</title><rect x="99.4373%" y="213" width="0.4719%" height="15" fill="rgb(210,96,50)" fg:x="10957" fg:w="52"/><text x="99.6873%" y="223.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (64 samples, 0.58%)</title><rect x="99.3466%" y="261" width="0.5808%" height="15" fill="rgb(222,178,2)" fg:x="10947" fg:w="64"/><text x="99.5966%" y="271.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::raw_vec::finish_grow (61 samples, 0.55%)</title><rect x="99.3738%" y="245" width="0.5536%" height="15" fill="rgb(226,74,18)" fg:x="10950" fg:w="61"/><text x="99.6238%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (60 samples, 0.54%)</title><rect x="99.3829%" y="229" width="0.5445%" height="15" fill="rgb(225,67,54)" fg:x="10951" fg:w="60"/><text x="99.6329%" y="239.50"></text></g><g><title>monad_gossip-955ed6b31611c195`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (66 samples, 0.60%)</title><rect x="99.3375%" y="277" width="0.5990%" height="15" fill="rgb(251,92,32)" fg:x="10946" fg:w="66"/><text x="99.5875%" y="287.50"></text></g><g><title>monad_gossip-955ed6b31611c195`core::hash::BuildHasher::hash_one (5 samples, 0.05%)</title><rect x="99.9365%" y="277" width="0.0454%" height="15" fill="rgb(228,149,22)" fg:x="11012" fg:w="5"/><text x="100.1865%" y="287.50"></text></g><g><title>all (11,019 samples, 100%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(243,54,13)" fg:x="0" fg:w="11019"/><text x="0.2500%" y="479.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (11,011 samples, 99.93%)</title><rect x="0.0726%" y="453" width="99.9274%" height="15" fill="rgb(243,180,28)" fg:x="8" fg:w="11011"/><text x="0.3226%" y="463.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (11,011 samples, 99.93%)</title><rect x="0.0726%" y="437" width="99.9274%" height="15" fill="rgb(208,167,24)" fg:x="8" fg:w="11011"/><text x="0.3226%" y="447.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>monad_gossip-955ed6b31611c195`std::sys::unix::thread::Thread::new::thread_start (11,011 samples, 99.93%)</title><rect x="0.0726%" y="421" width="99.9274%" height="15" fill="rgb(245,73,45)" fg:x="8" fg:w="11011"/><text x="0.3226%" y="431.50">monad_gossip-955ed6b31611c195`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>monad_gossip-955ed6b31611c195`core::ops::function::FnOnce::call_once{{vtable.shim}} (11,011 samples, 99.93%)</title><rect x="0.0726%" y="405" width="99.9274%" height="15" fill="rgb(237,203,48)" fg:x="8" fg:w="11011"/><text x="0.3226%" y="415.50">monad_gossip-955ed6b31611c195`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>monad_gossip-955ed6b31611c195`std::sys_common::backtrace::__rust_begin_short_backtrace (11,011 samples, 99.93%)</title><rect x="0.0726%" y="389" width="99.9274%" height="15" fill="rgb(211,197,16)" fg:x="8" fg:w="11011"/><text x="0.3226%" y="399.50">monad_gossip-955ed6b31611c195`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>monad_gossip-955ed6b31611c195`test::run_test::_{{closure}} (11,011 samples, 99.93%)</title><rect x="0.0726%" y="373" width="99.9274%" height="15" fill="rgb(243,99,51)" fg:x="8" fg:w="11011"/><text x="0.3226%" y="383.50">monad_gossip-955ed6b31611c195`test::run_test::_{{closure}}</text></g><g><title>monad_gossip-955ed6b31611c195`test::__rust_begin_short_backtrace (11,011 samples, 99.93%)</title><rect x="0.0726%" y="357" width="99.9274%" height="15" fill="rgb(215,123,29)" fg:x="8" fg:w="11011"/><text x="0.3226%" y="367.50">monad_gossip-955ed6b31611c195`test::__rust_begin_short_backtrace</text></g><g><title>monad_gossip-955ed6b31611c195`core::ops::function::FnOnce::call_once (11,011 samples, 99.93%)</title><rect x="0.0726%" y="341" width="99.9274%" height="15" fill="rgb(239,186,37)" fg:x="8" fg:w="11011"/><text x="0.3226%" y="351.50">monad_gossip-955ed6b31611c195`core::ops::function::FnOnce::call_once</text></g><g><title>monad_gossip-955ed6b31611c195`monad_gossip::seeder::tests::test_framed_messages_raptor (11,011 samples, 99.93%)</title><rect x="0.0726%" y="325" width="99.9274%" height="15" fill="rgb(252,136,39)" fg:x="8" fg:w="11011"/><text x="0.3226%" y="335.50">monad_gossip-955ed6b31611c195`monad_gossip::seeder::tests::test_framed_messages_raptor</text></g><g><title>monad_gossip-955ed6b31611c195`monad_gossip::testutil::test_broadcast (9,741 samples, 88.40%)</title><rect x="11.5981%" y="309" width="88.4019%" height="15" fill="rgb(223,213,32)" fg:x="1278" fg:w="9741"/><text x="11.8481%" y="319.50">monad_gossip-955ed6b31611c195`monad_gossip::testutil::test_broadcast</text></g><g><title>monad_gossip-955ed6b31611c195`monad_gossip::connection_manager::ConnectionManager&lt;G&gt;::poll (4,567 samples, 41.45%)</title><rect x="58.5534%" y="293" width="41.4466%" height="15" fill="rgb(233,115,5)" fg:x="6452" fg:w="4567"/><text x="58.8034%" y="303.50">monad_gossip-955ed6b31611c195`monad_gossip::connection_manager::Conn..</text></g><g><title>monad_gossip-955ed6b31611c195`monad_gossip::seeder::Seeder&lt;C&gt;::prepare_message (2 samples, 0.02%)</title><rect x="99.9818%" y="277" width="0.0182%" height="15" fill="rgb(207,226,44)" fg:x="11017" fg:w="2"/><text x="100.2318%" y="287.50"></text></g></svg></svg>