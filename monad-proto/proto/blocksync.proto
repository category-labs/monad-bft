syntax = "proto3";

package monad_proto.blocksync;

import "basic.proto";
import "block.proto";

message ProtoBlockRange {
  monad_proto.basic.ProtoBlockId last_block_id = 1;
  monad_proto.basic.ProtoSeqNum root_seq_num = 2;
}

enum ProtoBlockSyncSelfRequester {
  CONSENSUS = 0;
  STATE_SYNC = 1;
}

message ProtoBlockSyncSelfRequest {
  ProtoBlockSyncSelfRequester requester = 1;
  ProtoBlockRange block_range = 2;
}

// no rust type
// conversion wrapped into ProtoBlockSyncHeadersResponse
message ProtoBlockSyncHeaders {
  ProtoBlockRange block_range = 1;
  repeated monad_proto.block.ProtoBlock headers = 2;
}

message ProtoBlockSyncHeadersResponse {
  oneof headers_response {
    ProtoBlockSyncHeaders headers_found = 1;
    ProtoBlockRange not_available = 2;
  }
}

message ProtoBlockSyncPayloadResponse {
  oneof payload_response {
    monad_proto.block.ProtoPayload payload_found = 1;
    monad_proto.basic.ProtoPayloadId not_available = 2;
  }
}
