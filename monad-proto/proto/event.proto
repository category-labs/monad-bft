syntax = "proto3";

package monad_proto.event;

import "basic.proto";
import "block.proto";
import "message.proto";
import "quorum_certificate.proto";
import "signing.proto";
import "state_root_hash.proto";
import "timeout.proto";
import "validator_data.proto";

// this type doesn't have a pair rust type
// conversion is done in ProtoConsensusEvent
message ProtoMessageWithSender {
  monad_proto.basic.ProtoNodeId sender = 1;
  monad_proto.message.ProtoUnverifiedConsensusMessage unverified_message = 2;
}

message ProtoPaceMakerTimeout {
  // left empty on purpose
}

message ProtoBlockSyncTimeout {
  monad_proto.basic.ProtoBlockId block_id = 1;
}

message ProtoScheduleTimeout {
  oneof event {
    ProtoPaceMakerTimeout pacemaker = 1;
    ProtoBlockSyncTimeout block_sync = 2;
  }
}

message ProtoUpdateValidatorsEvent {
  monad_proto.validator_data.ProtoValidatorSetData validator_set_data = 1;
  monad_proto.basic.ProtoEpoch epoch = 2;
}

message ProtoStateUpdateEvent {
  monad_proto.state_root_hash.ProtoStateRootHashInfo info = 1;
}

message ProtoBlockSyncRequestWithSender {
  monad_proto.basic.ProtoNodeId sender = 1;
  monad_proto.message.ProtoRequestBlockSyncMessage request = 2;
}

message ProtoBlockSyncResponseWithSender {
  monad_proto.basic.ProtoNodeId sender = 1;
  monad_proto.message.ProtoBlockSyncMessage response = 2;
}

enum ProtoBlockSyncSelfRequester {
  CONSENSUS = 0;
  STATE_SYNC = 1;
}

message ProtoBlockSyncSelfRequest {
  ProtoBlockSyncSelfRequester requester = 1;
  monad_proto.message.ProtoRequestBlockSyncMessage request = 2;
}

message ProtoTimestampUpdate {
   uint64 update = 1;
}

message ProtoConsensusEvent {
  oneof event {
    ProtoMessageWithSender message = 1;
    ProtoPaceMakerTimeout timeout = 2;
    monad_proto.block.ProtoBlock block_sync = 3;
  }
}

message ProtoBlockSyncEvent {
  oneof event {
    ProtoBlockSyncRequestWithSender request = 1;
    ProtoBlockSyncSelfRequest self_request = 2;
    ProtoBlockSyncSelfRequest self_cancel_request = 3;
    ProtoBlockSyncResponseWithSender response = 4;
    monad_proto.message.ProtoBlockSyncMessage self_response = 5;
    monad_proto.message.ProtoRequestBlockSyncMessage timeout = 6;
  }
}

message ProtoValidatorEvent {
  oneof event {
    ProtoUpdateValidatorsEvent update_validators = 1;
  }
}

message ProtoUserTx {
  repeated bytes tx = 1;
}

message ProtoClearMempool {}

message ProtoForwardedTxs {
  monad_proto.basic.ProtoNodeId sender = 1;
  monad_proto.message.ProtoForwardedTx forwarded_tx = 2;
}

message ProtoMempoolEvent {
  oneof event {
    ProtoUserTx usertx = 1;
    ProtoForwardedTxs forwarded_txs = 2;
    ProtoClearMempool clear = 3;
  }
}

message ProtoPeerStateUpdateWithSender {
  monad_proto.basic.ProtoNodeId sender = 1;
  monad_proto.message.ProtoPeerStateRootMessage message = 2;
}


message ProtoAsyncStateVerifyEvent {
  oneof event {
    ProtoPeerStateUpdateWithSender peer_state_root = 1;
    ProtoStateUpdateEvent local_state_root = 2;
  }
}

message ProtoMetricsTimeout {}

message ProtoGetValidatorSetEvent {}
message ProtoClearMetricsEvent {}

message ProtoControlPanelEvent {
  oneof event {
    ProtoGetValidatorSetEvent get_validator_set_event = 1;
    ProtoClearMetricsEvent clear_metrics_event = 2;
  }
}

message ProtoInboundStateMessage {
  monad_proto.basic.ProtoNodeId sender = 1;
  monad_proto.message.ProtoStateSyncNetworkMessage message = 2;
}

message ProtoOutboundStateMessage {
  monad_proto.basic.ProtoNodeId recipient = 1;
  monad_proto.message.ProtoStateSyncNetworkMessage message = 2;
}

message ProtoDoneSync {
  monad_proto.basic.ProtoSeqNum seq_num = 1;
}

message ProtoRootInfo {
  monad_proto.basic.ProtoRound round = 1;
  monad_proto.basic.ProtoSeqNum seq_num = 2;
  monad_proto.basic.ProtoEpoch epoch = 3;
  monad_proto.basic.ProtoBlockId block_id = 4;
  monad_proto.state_root_hash.ProtoStateRootHash state_root = 5;
}

message ProtoRequestSync {
  ProtoRootInfo root = 1;
  monad_proto.quorum_certificate.ProtoQuorumCertificate high_qc = 2;
}

message ProtoStateSyncEvent {
  oneof event {
    ProtoInboundStateMessage inbound = 1;
    ProtoOutboundStateMessage outbound = 2;
    ProtoDoneSync done_sync = 3;
    ProtoRequestSync request_sync = 4;
    monad_proto.block.ProtoBlock block_sync = 5;
  }
}

message ProtoMonadEvent{
  oneof event {
    ProtoConsensusEvent consensus_event = 1;
    ProtoBlockSyncEvent block_sync_event = 2;
    ProtoValidatorEvent validator_event = 3;
    ProtoMempoolEvent mempool_event = 4;
    ProtoStateUpdateEvent state_root_event = 5;
    ProtoAsyncStateVerifyEvent async_state_verify_event = 6;
    ProtoControlPanelEvent control_panel_event = 7;
    ProtoTimestampUpdate timestamp_update_event = 8;
    ProtoStateSyncEvent state_sync_event = 9;
  }
}
