syntax = "proto3";

package monad_proto.event;

import "basic.proto";
import "block.proto";
import "message.proto";
import "quorum_certificate.proto";
import "signing.proto";
import "state_root_hash.proto";
import "timeout.proto";
import "validator_data.proto";

// this type doesn't have a pair rust type
// conversion is done in ProtoConsensusEvent
message ProtoMessageWithSender {
  monad_proto.basic.ProtoNodeId sender = 1;
  monad_proto.message.ProtoUnverifiedConsensusMessage unverified_message = 2;
}

message ProtoPaceMakerTimeout {
  // left empty on purpose
}

message ProtoBlockSyncTimeout {
  monad_proto.basic.ProtoBlockId block_id = 1;
}

message ProtoScheduleTimeout {
  oneof event {
    ProtoPaceMakerTimeout pacemaker = 1;
    ProtoBlockSyncTimeout block_sync = 2;
  }
}

message ProtoFetchedBlock {
  monad_proto.basic.ProtoNodeId requester = 1;
  monad_proto.basic.ProtoBlockId block_id = 2;
  optional monad_proto.block.ProtoBlock unverified_block = 3;
}

message ProtoUpdateValidatorsEvent {
  monad_proto.validator_data.ProtoValidatorData validator_data = 1;
  monad_proto.basic.ProtoEpoch epoch = 2;
}

message ProtoStateUpdateEvent {
  monad_proto.state_root_hash.ProtoStateRootHashInfo info = 1;
}

message ProtoBlockSyncRequestWithSender {
  monad_proto.basic.ProtoNodeId sender = 1;
  monad_proto.message.ProtoRequestBlockSyncMessage request = 2;
}

message ProtoBlockSyncResponseWithSender {
  monad_proto.basic.ProtoNodeId sender = 1;
  monad_proto.message.ProtoBlockSyncMessage response = 2;
}

message ProtoConsensusEvent {
  oneof event {
    ProtoMessageWithSender message = 1;
    ProtoScheduleTimeout timeout = 2;
    ProtoStateUpdateEvent state_update = 3;
    ProtoBlockSyncResponseWithSender block_sync_resp = 4;
  }
}

message ProtoBlockSyncEvent {
  oneof event {
    ProtoBlockSyncRequestWithSender block_sync_req = 1;
    ProtoFetchedBlock fetched_block = 2;
  }
}

message ProtoValidatorEvent {
  oneof event {
    ProtoUpdateValidatorsEvent update_validators = 1;
  }
}

message ProtoUserTx {
  repeated bytes tx = 1;
}

message ProtoCascadeTxnsWithSender {
  monad_proto.basic.ProtoNodeId sender = 1;
  monad_proto.message.ProtoCascadeTxMessage cascade = 2;
}

message ProtoMempoolEvent {
  oneof event {
    ProtoUserTx usertx = 1;
    ProtoCascadeTxnsWithSender cascade_txns = 2;
  }
}

message ProtoPeerStateUpdateWithSender {
  monad_proto.basic.ProtoNodeId sender = 1;
  monad_proto.message.ProtoPeerStateRootMessage message = 2;
}


message ProtoAsyncStateVerifyEvent {
  oneof event {
    ProtoPeerStateUpdateWithSender peer_state_root = 1;
    ProtoStateUpdateEvent local_state_root = 2;
  }
}

message ProtoMetricsTimeout {}

message ProtoMetricsEvent {
  oneof event {
    ProtoMetricsTimeout timeout = 1;
  }
}

message ProtoMonadEvent{
  oneof event {
    ProtoConsensusEvent consensus_event = 1;
    ProtoBlockSyncEvent block_sync_event = 2;
    ProtoValidatorEvent validator_event = 3;
    ProtoMempoolEvent mempool_event = 4;
    ProtoAsyncStateVerifyEvent async_state_verify_event = 5;
    ProtoMetricsEvent metrics_event = 6;
  }
}
