syntax = "proto3";

package monad_proto.event;

import "basic.proto";
import "block.proto";
import "message.proto";
import "pacemaker.proto";
import "quorum_certificate.proto";
import "signing.proto";
import "timeout.proto";
import "validator_set.proto";

message ProtoPeerId {
  monad_proto.basic.ProtoPubkey pubkey = 1;
}

// this type doesn't have a pair rust type
// conversion is done in ProtoConsensusEvent
message ProtoMessageWithSender {
  monad_proto.basic.ProtoPubkey sender = 1;
  monad_proto.message.ProtoUnverifiedConsensusMessage unverified_message = 2;
}

message ProtoFetchedTxs {
  monad_proto.basic.ProtoNodeId node_id = 1;
  monad_proto.basic.ProtoRound round = 2;
  monad_proto.quorum_certificate.ProtoQuorumCertificate high_qc = 3;

  optional monad_proto.timeout.ProtoTimeoutCertificate last_round_tc = 4;

  bytes tx_hashes = 5;
  uint64 seq_num = 6;
  monad_proto.basic.ProtoHash state_root_hash = 7;
}

message ProtoFetchedFullTxs {
  monad_proto.basic.ProtoNodeId author = 1;
  monad_proto.message.ProtoProposalMessage p = 2;
  bytes full_txs = 3;
}

message ProtoFetchedBlock {
  monad_proto.basic.ProtoNodeId requester = 1;
  monad_proto.basic.ProtoBlockId block_id = 2;
  optional monad_proto.block.ProtoUnverifiedFullBlock unverified_full_block = 3;
}

message ProtoAdvanceEpochEvent {
  monad_proto.validator_set.ProtoValidatorSetData validator_set = 1;
}

message ProtoLoadEpochEvent {
  monad_proto.basic.ProtoEpoch epoch = 1;
  monad_proto.validator_set.ProtoValidatorSetData validator_set = 2;
  monad_proto.validator_set.ProtoValidatorSetData upcoming_validator_set = 3;
}

message ProtoStateUpdateEvent {
  uint64 seq_num = 1;
  monad_proto.basic.ProtoHash state_root_hash = 2;
}

message ProtoConsensusEvent {
  oneof event {
    ProtoMessageWithSender message = 1;
    monad_proto.pacemaker.ProtoPacemakerTimerExpire timeout = 2;
    ProtoFetchedTxs fetched_txs = 3;
    ProtoFetchedFullTxs fetched_full_txs = 4;
    ProtoAdvanceEpochEvent advance_epoch = 5;
    ProtoLoadEpochEvent load_epoch = 6;
    ProtoFetchedBlock fetched_block = 7;
    ProtoStateUpdateEvent state_update = 8;
  }
}

message ProtoMonadEvent{
  oneof event {
    ProtoConsensusEvent consensus_event = 2;
  }
}
