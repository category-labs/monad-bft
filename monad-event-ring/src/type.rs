use std::ffi::CStr;

use crate::{
    ffi::{
        g_monad_event_ring_type_names, monad_event_ring, monad_event_ring_check_type,
        monad_event_ring_type, monad_event_ring_type_MONAD_EVENT_RING_TYPE_COUNT,
        monad_event_ring_type_MONAD_EVENT_RING_TYPE_NONE,
    },
    EventDescriptorInfo,
};

/// Trait representing the underlying type of an event ring.
///
/// An [`EventRing`](crate::EventRing) consumes events produced by an event ring writer which
/// encodes each event into a payload byte slice. These events must have a known ABI a
pub trait EventRingType: 'static {
    /// An integer specifying the event ring type.
    fn ring_ctype() -> monad_event_ring_type;
    /// A human-readable name for the `ring_ctype`.
    ///
    /// # Panics
    ///
    /// Panics if [`ring_ctype()`](EventRingType::ring_ctype) is invalid.
    fn ring_ctype_name() -> String {
        let ring_ctype = Self::ring_ctype();

        assert!(monad_event_ring_type_MONAD_EVENT_RING_TYPE_NONE < ring_ctype);
        assert!(ring_ctype < monad_event_ring_type_MONAD_EVENT_RING_TYPE_COUNT);

        let description_cstr =
            unsafe { CStr::from_ptr(g_monad_event_ring_type_names[ring_ctype as usize]) };

        description_cstr.to_str().unwrap().to_string()
    }

    /// An autogenerated hash derived from the underlying C type defs.
    ///
    /// This hash is used for versioning control and enforces that event ingested through
    /// [`EventReader`](crate::EventReader) have the same underlying ABI as the event ring writer.
    fn ring_metadata_hash() -> &'static [u8; 32];

    /// Used to check that the event ring matches this [`EventRingType`].
    fn check_ring_type(c_event_ring: &monad_event_ring) -> Result<(), String> {
        monad_event_ring_check_type(c_event_ring, Self::ring_ctype(), Self::ring_metadata_hash())
    }

    /// The metadata associated with each [`Event`](EventRingType::Event).
    ///
    /// Every event descriptor stores a metadata array which can be used to attach metadata to
    /// events. This associated type specifies what the shape of that metadata is for this event
    /// ring type.
    type FlowInfo;

    /// Defines how to convert the raw user info from an event descriptor to the associated
    /// [`Self::FlowInfo`](EventRingType::FlowInfo) type.
    fn transmute_flow_info(user: [u64; 4]) -> Self::FlowInfo;

    /// The rust-native type of the elements produced by an event ring.
    type Event;
    /// A zero-copy view of the elements produced by an event ring.
    type EventRef<'reader>;

    /// Provides the zero-copy view [`Self::EventRef<'reader>`](EventRingType::EventRef) from an
    /// event ring payload byte slice.
    fn raw_to_event_ref<'reader>(
        info: EventDescriptorInfo<Self>,
        bytes: &'reader [u8],
    ) -> Self::EventRef<'reader>
    where
        Self: Sized;

    /// Defines how to convert the zero-copy [`Self::EventRef<'reader>`](EventRingType::EventRef) to
    /// the owned variant [`Self::Event`](EventRingType::Event).
    fn event_ref_to_event<'reader>(event_ref: Self::EventRef<'reader>) -> Self::Event;
}

/// Event ring type used for ingesting events as raw byte data.
pub struct RawEventRingType;

impl EventRingType for RawEventRingType {
    fn ring_ctype() -> monad_event_ring_type {
        unreachable!()
    }

    fn ring_ctype_name() -> String {
        "raw".to_string()
    }

    fn ring_metadata_hash() -> &'static [u8; 32] {
        unreachable!()
    }

    fn check_ring_type(_: &monad_event_ring) -> Result<(), String> {
        Ok(())
    }

    type FlowInfo = ();

    fn transmute_flow_info(_: [u64; 4]) -> Self::FlowInfo {}

    type Event = (u16, Vec<u8>);
    type EventRef<'reader> = (u16, &'reader [u8]);

    fn raw_to_event_ref<'reader>(
        info: EventDescriptorInfo<Self>,
        bytes: &'reader [u8],
    ) -> Self::EventRef<'reader> {
        (info.event_type, bytes)
    }

    fn event_ref_to_event<'reader>(
        (event_type, event_ref): Self::EventRef<'reader>,
    ) -> Self::Event {
        (event_type, event_ref.to_vec())
    }
}
