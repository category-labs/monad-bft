// DO NOT EDIT THIS FILE! If you need changes, change the code generator
// instead. This file was generated by running the following command:
//
//    ../../monad-cxx/monad-execution/libs/event/src/python/cg-events rust
//    -p .

//! Core definitions of event enumeration types and event payload structures

#![allow(non_camel_case_types)]

use alloy_primitives::{Address, B256, U256};

/// Each type of event is assigned a unique value in this enumeration
#[repr(u16)]
#[derive(Copy, Clone, Debug)]
pub enum monad_event_type {
    NONE,
    QUEUE_INIT,
    THREAD_CREATE,
    THREAD_EXIT,
    HEARTBEAT,
    THR_PAGE_ALLOC,
    TEST_COUNT_64,
    BLOCK_START,
    BLOCK_END,
    BLOCK_FINALIZE,
    TXN_START,
    TXN_LOG,
    TXN_RESTART,
    TXN_END,
    WR_ACCT_STATE_BALANCE,
    WR_ACCT_STATE_STORAGE,
}

/// Event payload for THREAD_CREATE
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub struct thread_info {
    pub seqno: u64,
    pub epoch_nanos: u64,
    pub process_id: u64,
    pub thread_id: u64,
    pub source_id: u8,
    pub thread_name: [u8; 31],
}

/// Event payload for BLOCK_START
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub struct block_exec_header {
    pub bft_block_id: B256,
    pub round: u64,
    pub parent_hash: B256,
    pub ommers_hash: B256,
    pub beneficiary: Address,
    pub difficulty: u64,
    pub number: u64,
    pub gas_limit: u64,
    pub timestamp: u64,
    pub extra_data_length: u64,
    pub extra_data: B256,
    pub mix_hash: B256,
    pub nonce: [u8; 8],
    pub base_fee_per_gas: U256,
    pub txn_count: u64,
}

/// Event payload for BLOCK_END
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub struct block_exec_result {
    pub logs_bloom: [u8; 256],
    pub state_root: B256,
    pub transactions_root: B256,
    pub receipts_root: B256,
    pub withdrawals_root: B256,
    pub gas_used: u64,
}

/// Event payload for TXN_START
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub struct txn_header {
    pub nonce: u64,
    pub gas_limit: u64,
    pub max_fee_per_gas: U256,
    pub value: U256,
    pub to: Address,
    pub txn_type: u8,
    pub r: U256,
    pub s: U256,
    pub y_parity: u8,
    pub chain_id: U256,
    pub data_length: u32,
}

/// Event payload for TXN_LOG
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub struct txn_log {
    pub address: Address,
    pub topic_count: u8,
    pub data_length: u32,
}

/// Event payload for TXN_END
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub struct txn_receipt {
    pub status: u64,
    pub gas_used: u64,
}

/// Event payload for WR_ACCT_STATE_BALANCE
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub struct account_balance {
    pub address: Address,
    pub balance: U256,
}

/// Event payload for WR_ACCT_STATE_STORAGE
#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub struct account_storage {
    pub address: Address,
    pub storage_key: B256,
    pub storage_value: B256,
}
